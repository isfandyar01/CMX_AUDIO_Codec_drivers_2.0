
spi_cbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004830  08004830  0003750c  2**0
                  CONTENTS
  4 .ARM          00000008  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004838  08004838  0003750c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001750c  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2001750c  0801bd4c  0003750c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20017b24  0801bd4c  00037b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003750c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125dd  00000000  00000000  0003753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d3  00000000  00000000  00049b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0004c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  0004d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296cf  00000000  00000000  0004e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001207b  00000000  00000000  00077867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fafee  00000000  00000000  000898e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001848d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000418c  00000000  00000000  00184920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2001750c 	.word	0x2001750c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080047c4 	.word	0x080047c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20017510 	.word	0x20017510
 80001e8:	080047c4 	.word	0x080047c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <CBUS_BUSY>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT,uint8_t addr);



static inline FlagStatus CBUS_BUSY(SPI_TypeDef *SPI_PORT) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 7)) ? SET : RESET;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>:

static inline FlagStatus CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 0)) ? SET : RESET;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf14      	ite	ne
 800052a:	2301      	movne	r3, #1
 800052c:	2300      	moveq	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <CBUS_SendFrame>:
}
*/
uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT);

static inline void CBUS_SendFrame(SPI_TypeDef *SPI_PORT, uint8_t tx_data)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
	*((volatile uint8_t*) &(SPI_PORT->DR)) =SSP_DR_BITMASK(tx_data); //(uint16_t*) *((volatile uint8_t*) &
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	330c      	adds	r3, #12
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <CBUS_TX_BUFFER_EMPTY_CHECK>:





static inline FlagStatus CBUS_TX_BUFFER_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 1)) ? SET : RESET;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <swap_uint16>:


static inline uint16_t swap_uint16( uint16_t val )
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
    return (val << 8) | (val >> 8 );
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21b      	sxth	r3, r3
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <enable_clock_gpio_spi>:
 *      Author: Isfandyar Qureshi
 */
#include "cbus.h"

//working
void enable_clock_gpio_spi() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN; //enabled G clocks
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ba:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI3EN; // enabled SPI3 clock;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <set_cbus_pins>:
//working
void set_cbus_pins() {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

	// chip select PG0 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE0_0;
 80005dc:	4b53      	ldr	r3, [pc, #332]	; (800072c <set_cbus_pins+0x154>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a52      	ldr	r2, [pc, #328]	; (800072c <set_cbus_pins+0x154>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE0_1);
 80005e8:	4b50      	ldr	r3, [pc, #320]	; (800072c <set_cbus_pins+0x154>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a4f      	ldr	r2, [pc, #316]	; (800072c <set_cbus_pins+0x154>)
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	6013      	str	r3, [r2, #0]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_1;
 80005f4:	4b4d      	ldr	r3, [pc, #308]	; (800072c <set_cbus_pins+0x154>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4a4c      	ldr	r2, [pc, #304]	; (800072c <set_cbus_pins+0x154>)
 80005fa:	f043 0302 	orr.w	r3, r3, #2
 80005fe:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED0_0);
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <set_cbus_pins+0x154>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	4a49      	ldr	r2, [pc, #292]	; (800072c <set_cbus_pins+0x154>)
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	6093      	str	r3, [r2, #8]

	// chip select PG1 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE1_0;
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <set_cbus_pins+0x154>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a46      	ldr	r2, [pc, #280]	; (800072c <set_cbus_pins+0x154>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE1_1);
 8000618:	4b44      	ldr	r3, [pc, #272]	; (800072c <set_cbus_pins+0x154>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a43      	ldr	r2, [pc, #268]	; (800072c <set_cbus_pins+0x154>)
 800061e:	f023 0308 	bic.w	r3, r3, #8
 8000622:	6013      	str	r3, [r2, #0]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED1_1;
 8000624:	4b41      	ldr	r3, [pc, #260]	; (800072c <set_cbus_pins+0x154>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4a40      	ldr	r2, [pc, #256]	; (800072c <set_cbus_pins+0x154>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED1_0);
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <set_cbus_pins+0x154>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	4a3d      	ldr	r2, [pc, #244]	; (800072c <set_cbus_pins+0x154>)
 8000636:	f023 0304 	bic.w	r3, r3, #4
 800063a:	6093      	str	r3, [r2, #8]

	// output push pull
	GPIOG->OTYPER |= (GPIO_OTYPER_OT_0);
 800063c:	4b3b      	ldr	r3, [pc, #236]	; (800072c <set_cbus_pins+0x154>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a3a      	ldr	r2, [pc, #232]	; (800072c <set_cbus_pins+0x154>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6053      	str	r3, [r2, #4]
	//pulled up
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD0;
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <set_cbus_pins+0x154>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a37      	ldr	r2, [pc, #220]	; (800072c <set_cbus_pins+0x154>)
 800064e:	f043 0303 	orr.w	r3, r3, #3
 8000652:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <set_cbus_pins+0x154>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a34      	ldr	r2, [pc, #208]	; (800072c <set_cbus_pins+0x154>)
 800065a:	f023 030c 	bic.w	r3, r3, #12
 800065e:	60d3      	str	r3, [r2, #12]

	// PC9 alternate function SCK

	GPIOG->MODER &= ~(GPIO_MODER_MODER9_0);
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <set_cbus_pins+0x154>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a31      	ldr	r2, [pc, #196]	; (800072c <set_cbus_pins+0x154>)
 8000666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= GPIO_MODER_MODER9_1;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <set_cbus_pins+0x154>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a2e      	ldr	r2, [pc, #184]	; (800072c <set_cbus_pins+0x154>)
 8000672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000676:	6013      	str	r3, [r2, #0]
	//  very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <set_cbus_pins+0x154>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <set_cbus_pins+0x154>)
 800067e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000682:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED9_0);
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <set_cbus_pins+0x154>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <set_cbus_pins+0x154>)
 800068a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800068e:	6093      	str	r3, [r2, #8]
	//sck ends

	// PG11 alternate function mosi
	//mosi config starts

	GPIOG->MODER |= GPIO_MODER_MODE11_1;
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <set_cbus_pins+0x154>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <set_cbus_pins+0x154>)
 8000696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800069a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE11_0);
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <set_cbus_pins+0x154>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <set_cbus_pins+0x154>)
 80006a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006a6:	6013      	str	r3, [r2, #0]

	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_1;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <set_cbus_pins+0x154>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <set_cbus_pins+0x154>)
 80006ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006b2:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED11_0);
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <set_cbus_pins+0x154>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <set_cbus_pins+0x154>)
 80006ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006be:	6093      	str	r3, [r2, #8]
	// pushpull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_11);
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <set_cbus_pins+0x154>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <set_cbus_pins+0x154>)
 80006c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ca:	6053      	str	r3, [r2, #4]

	//mosi config ends

	// PG10 alternate function miso
	GPIOG->MODER |= GPIO_MODER_MODE10_1;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <set_cbus_pins+0x154>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <set_cbus_pins+0x154>)
 80006d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE10_0);
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <set_cbus_pins+0x154>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <set_cbus_pins+0x154>)
 80006de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006e2:	6013      	str	r3, [r2, #0]
	//  high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <set_cbus_pins+0x154>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <set_cbus_pins+0x154>)
 80006ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ee:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED10_0);
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <set_cbus_pins+0x154>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <set_cbus_pins+0x154>)
 80006f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006fa:	6093      	str	r3, [r2, #8]
	// push pull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_10);
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <set_cbus_pins+0x154>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <set_cbus_pins+0x154>)
 8000702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000706:	6053      	str	r3, [r2, #4]
	// pulled down
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <set_cbus_pins+0x154>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <set_cbus_pins+0x154>)
 800070e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000712:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD10_0);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <set_cbus_pins+0x154>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <set_cbus_pins+0x154>)
 800071a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800071e:	60d3      	str	r3, [r2, #12]
	//miso_ends

}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	48001800 	.word	0x48001800

08000730 <set_spi_portg_alternate_fun6>:

//working
void set_spi_portg_alternate_fun6() {
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	// pg9 10 11 alternation function 6 for spi3 0110
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_1);
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_2);
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_1);
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_2);
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000762:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_1);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 800076a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800076e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_2);
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <set_spi_portg_alternate_fun6+0x58>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	48001800 	.word	0x48001800

0800078c <CBUS_INIT>:
//working
void CBUS_INIT() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	// pg9 sck pg10 miso pg11 mosi pg0 cs pg0

	enable_clock_gpio_spi();	//enabled G clocks // enabled SPI3 clock;
 8000790:	f7ff ff0c 	bl	80005ac <enable_clock_gpio_spi>
	set_cbus_pins(); // set sck mosi miso chip select  alternate function and speed and output type
 8000794:	f7ff ff20 	bl	80005d8 <set_cbus_pins>
	set_spi_portg_alternate_fun6(); //
 8000798:	f7ff ffca 	bl	8000730 <set_spi_portg_alternate_fun6>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <CBUS_CHIP_SElECT_LOW>:
//working
void CBUS_CHIP_SElECT_LOW() {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BR0;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ae:	6193      	str	r3, [r2, #24]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	48001800 	.word	0x48001800

080007c0 <CBUS_CHIP_SElECT_HIGH>:
//working
void CBUS_CHIP_SElECT_HIGH() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BS0;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6193      	str	r3, [r2, #24]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	48001800 	.word	0x48001800

080007e0 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>:

void CBUS_CHIP_SElECT_OUPUT_CODEC_LOW() {
	GPIOG->BSRR |= GPIO_BSRR_BR1;
}

void CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BS1;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6193      	str	r3, [r2, #24]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	48001800 	.word	0x48001800

08000800 <Cbus_Config>:

// working configs cbus baud rate and other settings
void Cbus_Config(SPI_TypeDef *SPI_PORT) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	//// fclk mhz 40mhz /64 ///10mhz for uncompressed clean voice
	SPI_PORT->CR1  &= ~ SPI_CR1_BR_2;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f023 0220 	bic.w	r2, r3, #32
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 |= SPI_CR1_BR_1;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f043 0210 	orr.w	r2, r3, #16
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1  &= ~ SPI_CR1_BR_0;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 0208 	bic.w	r2, r3, #8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]

	//SPI_PORT-> mode 3

	SPI_PORT->CR1 |= SPI_CR1_CPOL | SPI_CR1_CPHA;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f043 0203 	orr.w	r2, r3, #3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]

	// FULL duplex
	SPI_PORT->CR1 &= ~SPI_CR1_RXONLY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
	// msb first
	SPI_PORT->CR1 &= ~ SPI_CR1_LSBFIRST;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	601a      	str	r2, [r3, #0]

	//software slave
	SPI_PORT->CR1 |= SPI_CR1_SSM;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]
	SPI_PORT->CR1 |= SPI_CR1_SSI;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	601a      	str	r2, [r3, #0]

	// master mode enabled
	SPI_PORT->CR1 |= SPI_CR1_MSTR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f043 0204 	orr.w	r2, r3, #4
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]

	// 8BIT DATA

	SPI_PORT->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	605a      	str	r2, [r3, #4]

	//SPI_PORT->

}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <Cbus_Write_no_data>:

void Cbus_Write_no_data(SPI_TypeDef *SPI_PORT, uint8_t addr) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	while (CBUS_BUSY(SPI_PORT))
 8000898:	bf00      	nop
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fe28 	bl	80004f0 <CBUS_BUSY>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f9      	bne.n	800089a <Cbus_Write_no_data+0xe>
		;
	CBUS_SendFrame(SPI_PORT, addr);
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fe46 	bl	800053c <CBUS_SendFrame>
	return;
 80008b0:	bf00      	nop
}
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <CbusWriteRegister>:

void CbusWriteRegister(SPI_TypeDef *SPI_PORT, uint8_t Addr, uint16_t data) ///working
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
 80008c4:	4613      	mov	r3, r2
 80008c6:	803b      	strh	r3, [r7, #0]
	uint16_t swapped = swap_uint16(data);
 80008c8:	883b      	ldrh	r3, [r7, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe59 	bl	8000582 <swap_uint16>
 80008d0:	4603      	mov	r3, r0
 80008d2:	81fb      	strh	r3, [r7, #14]
	uint8_t address_and_Value[3];
	uint8_t address = Addr;
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	737b      	strb	r3, [r7, #13]
	address_and_Value[2] = address;
 80008d8:	7b7b      	ldrb	r3, [r7, #13]
 80008da:	72bb      	strb	r3, [r7, #10]
	address_and_Value[1] = (swapped & 0xff);
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	727b      	strb	r3, [r7, #9]
	address_and_Value[0] = ((swapped >> 8) & (0xff));
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	723b      	strb	r3, [r7, #8]
	//while(CBUS_BUSY(SPI_PORT));

	while (CBUS_BUSY(SPI_PORT)) {
 80008ec:	bf00      	nop
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fdfe 	bl	80004f0 <CBUS_BUSY>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f9      	bne.n	80008ee <CbusWriteRegister+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fa:	b672      	cpsid	i
}
 80008fc:	bf00      	nop
	};
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address_and_Value[2]);
 80008fe:	7abb      	ldrb	r3, [r7, #10]
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fe1a 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[1]);
 8000908:	7a7b      	ldrb	r3, [r7, #9]
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe15 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[0]);
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fe10 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 800091c:	b662      	cpsie	i
}
 800091e:	bf00      	nop
	__enable_irq();
	while (CBUS_BUSY(SPI_PORT)) {
 8000920:	bf00      	nop
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fde4 	bl	80004f0 <CBUS_BUSY>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f9      	bne.n	8000922 <CbusWriteRegister+0x6a>
	};

	return;
 800092e:	bf00      	nop
}
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Cbus_Write_Word_stream>:

void Cbus_Write_Word_stream(SPI_TypeDef *SPI_PORT, uint8_t Addr,
		uint16_t *pdata, uint16_t num_of_bytes_to_write) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	461a      	mov	r2, r3
 8000942:	460b      	mov	r3, r1
 8000944:	72fb      	strb	r3, [r7, #11]
 8000946:	4613      	mov	r3, r2
 8000948:	813b      	strh	r3, [r7, #8]

	uint8_t address = Addr;
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	753b      	strb	r3, [r7, #20]
	uint16_t i = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	82fb      	strh	r3, [r7, #22]
	uint16_t Data;
	bool iIrqDisabler;

	while (CBUS_BUSY(SPI_PORT))
 8000952:	bf00      	nop
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fdcb 	bl	80004f0 <CBUS_BUSY>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1f9      	bne.n	8000954 <Cbus_Write_Word_stream+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
		;
	__disable_irq();
	iIrqDisabler = true;
 8000964:	2301      	movs	r3, #1
 8000966:	757b      	strb	r3, [r7, #21]
	CBUS_SendFrame(SPI_PORT, address);
 8000968:	7d3b      	ldrb	r3, [r7, #20]
 800096a:	4619      	mov	r1, r3
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f7ff fde5 	bl	800053c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 8000972:	2300      	movs	r3, #0
 8000974:	82fb      	strh	r3, [r7, #22]
 8000976:	e036      	b.n	80009e6 <Cbus_Write_Word_stream+0xb0>
		if (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT)) {
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff fdef 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10d      	bne.n	80009a0 <Cbus_Write_Word_stream+0x6a>
			if (iIrqDisabler != false) {
 8000984:	7d7b      	ldrb	r3, [r7, #21]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <Cbus_Write_Word_stream+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 800098a:	b662      	cpsie	i
}
 800098c:	bf00      	nop
				__enable_irq();
				iIrqDisabler = false;
 800098e:	2300      	movs	r3, #0
 8000990:	757b      	strb	r3, [r7, #21]
			}
			while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 8000992:	bf00      	nop
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff fde1 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0f9      	beq.n	8000994 <Cbus_Write_Word_stream+0x5e>
		}

		Data = (pdata[i] >> 8);
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	827b      	strh	r3, [r7, #18]
		CBUS_SendFrame(SPI_PORT, Data);
 80009ae:	8a7b      	ldrh	r3, [r7, #18]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fdc1 	bl	800053c <CBUS_SendFrame>
		Data = pdata[i];
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	827b      	strh	r3, [r7, #18]
		while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80009c6:	bf00      	nop
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fdc7 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f9      	beq.n	80009c8 <Cbus_Write_Word_stream+0x92>
		CBUS_SendFrame(SPI_PORT, Data);
 80009d4:	8a7b      	ldrh	r3, [r7, #18]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdae 	bl	800053c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 80009e0:	8afb      	ldrh	r3, [r7, #22]
 80009e2:	3301      	adds	r3, #1
 80009e4:	82fb      	strh	r3, [r7, #22]
 80009e6:	8afa      	ldrh	r2, [r7, #22]
 80009e8:	893b      	ldrh	r3, [r7, #8]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3c4      	bcc.n	8000978 <Cbus_Write_Word_stream+0x42>
	}
	if (iIrqDisabler != false) {
 80009ee:	7d7b      	ldrb	r3, [r7, #21]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <Cbus_Write_Word_stream+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
 80009f4:	b662      	cpsie	i
}
 80009f6:	bf00      	nop
		__enable_irq();
	}

	return;
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop

}
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <Cbus_Read_Byte>:
	}

	return;
}

uint8_t Cbus_Read_Byte(SPI_TypeDef *SPI_PORT, uint8_t Addr) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b084      	sub	sp, #16
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	70fb      	strb	r3, [r7, #3]

	uint8_t address = Addr;
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	73fb      	strb	r3, [r7, #15]
	uint16_t received_data = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	81bb      	strh	r3, [r7, #12]

	while (CBUS_BUSY(SPI_PORT))
 8000a16:	bf00      	nop
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fd69 	bl	80004f0 <CBUS_BUSY>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f9      	bne.n	8000a18 <Cbus_Read_Byte+0x16>
		;
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) /// check for existing data and dump it
 8000a24:	e004      	b.n	8000a30 <Cbus_Read_Byte+0x2e>
	{
		received_data = CBUS_ReceiveFrame(SPI_PORT); /// dump all junk data
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f88a 	bl	8000b40 <CBUS_ReceiveFrame>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	81bb      	strh	r3, [r7, #12]
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) /// check for existing data and dump it
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fd70 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f4      	bne.n	8000a26 <Cbus_Read_Byte+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
	}
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4619      	mov	r1, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fd79 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 1);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fd75 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a52:	b662      	cpsie	i
}
 8000a54:	bf00      	nop
	__enable_irq();
	while (!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 8000a56:	bf00      	nop
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fd5c 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0f9      	beq.n	8000a58 <Cbus_Read_Byte+0x56>
		; //stay here until rx fifo empty
	received_data = CBUS_ReceiveFrame(SPI_PORT); // dump address byte junk
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f86b 	bl	8000b40 <CBUS_ReceiveFrame>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	81bb      	strh	r3, [r7, #12]
//	while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));//stay here until rx fifo empty
//	received_data=CBUS_ReceiveFrame(SPI_PORT);// read actual data
	return received_data;
 8000a6e:	89bb      	ldrh	r3, [r7, #12]
 8000a70:	b2db      	uxtb	r3, r3
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <CBUS_READ_TWO_WORDS>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT, uint8_t addr) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]


	uint8_t address = addr;
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	73fb      	strb	r3, [r7, #15]
	uint32_t received_data;

	while (CBUS_BUSY(SPI_PORT));
 8000a8a:	bf00      	nop
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fd2f 	bl	80004f0 <CBUS_BUSY>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f9      	bne.n	8000a8c <CBUS_READ_TWO_WORDS+0x12>
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) {
 8000a98:	e004      	b.n	8000aa4 <CBUS_READ_TWO_WORDS+0x2a>
		received_data = CBUS_ReceiveFrame(SPI_PORT); /// dump all junk data
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f850 	bl	8000b40 <CBUS_ReceiveFrame>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60bb      	str	r3, [r7, #8]
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) {
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fd36 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f4      	bne.n	8000a9a <CBUS_READ_TWO_WORDS+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
	}
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fd3f 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 1);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fd3b 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 2);
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fd37 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ace:	b662      	cpsie	i
}
 8000ad0:	bf00      	nop
	__enable_irq();
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000ad2:	bf00      	nop
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fd1e 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <CBUS_READ_TWO_WORDS+0x5a>
    received_data=CBUS_ReceiveFrame(SPI_PORT);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f82d 	bl	8000b40 <CBUS_ReceiveFrame>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60bb      	str	r3, [r7, #8]
    received_data<<=8;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	60bb      	str	r3, [r7, #8]
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000af0:	bf00      	nop
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fd0f 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f9      	beq.n	8000af2 <CBUS_READ_TWO_WORDS+0x78>
    received_data|=CBUS_ReceiveFrame(SPI_PORT);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f81e 	bl	8000b40 <CBUS_ReceiveFrame>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
    received_data<<=8;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000b14:	bf00      	nop
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fcfd 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f9      	beq.n	8000b16 <CBUS_READ_TWO_WORDS+0x9c>
    received_data |= (CBUS_ReceiveFrame(SPI_PORT) & 0xff);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f80c 	bl	8000b40 <CBUS_ReceiveFrame>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
	return (uint32_t) received_data;
 8000b34:	68bb      	ldr	r3, [r7, #8]

}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <CBUS_ReceiveFrame>:

uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	    static uint16_t RX_data;
	     return RX_data =(uint16_t)(SSP_DR_BITMASK(*((volatile uint8_t*) &(SPI_PORT->DR))));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	330c      	adds	r3, #12
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <CBUS_ReceiveFrame+0x28>)
 8000b54:	801a      	strh	r2, [r3, #0]
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <CBUS_ReceiveFrame+0x28>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20017528 	.word	0x20017528

08000b6c <enable_codec_boot_control_gpios>:
#include "CODEC_REG.h"
#include "functional_image.h"


void enable_codec_boot_control_gpios()
{   //PG2 as output for boot control
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	GPIOG->MODER |= GPIO_MODER_MODE2_0;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE2_1);
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b82:	f023 0320 	bic.w	r3, r3, #32
 8000b86:	6013      	str	r3, [r2, #0]
	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED2_1;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b8e:	f043 0320 	orr.w	r3, r3, #32
 8000b92:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED2_0);
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000b9a:	f023 0310 	bic.w	r3, r3, #16
 8000b9e:	6093      	str	r3, [r2, #8]

	// PG3 as output for boot control
	GPIOG->MODER |= GPIO_MODER_MODE3_0;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000baa:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE3_1);
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bb6:	6013      	str	r3, [r2, #0]
	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED3_1;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc2:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED3_0);
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <enable_codec_boot_control_gpios+0x70>)
 8000bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bce:	6093      	str	r3, [r2, #8]

}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	48001800 	.word	0x48001800

08000be0 <set_boot_en1_en2_high>:


void set_boot_en1_en2_high(){
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

	GPIOG->BSRR |= GPIO_BSRR_BS2;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <set_boot_en1_en2_high+0x28>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <set_boot_en1_en2_high+0x28>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
	GPIOG->BSRR |= GPIO_BSRR_BS3;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <set_boot_en1_en2_high+0x28>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <set_boot_en1_en2_high+0x28>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	48001800 	.word	0x48001800

08000c0c <set_boot_en1_en2_low>:


void set_boot_en1_en2_low(){
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

	GPIOG->BSRR &=~ GPIO_BSRR_BS2;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <set_boot_en1_en2_low+0x28>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <set_boot_en1_en2_low+0x28>)
 8000c16:	f023 0304 	bic.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
	GPIOG->BSRR &=~ GPIO_BSRR_BS3;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <set_boot_en1_en2_low+0x28>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <set_boot_en1_en2_low+0x28>)
 8000c22:	f023 0308 	bic.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	48001800 	.word	0x48001800

08000c38 <General_Reset_to_CMX72619>:
	GPIOG->BSRR |= GPIO_BSRR_BS2;
	GPIOG->BSRR &=~ GPIO_BSRR_BS3;
}

void General_Reset_to_CMX72619()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	// setting booten1 and booten2 to 1 for cbus boot mode
	Cbus_Write_no_data(SPI3, General_Reset);
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <General_Reset_to_CMX72619+0x10>)
 8000c40:	f7ff fe24 	bl	800088c <Cbus_Write_no_data>
	//Cbus_Write_no_data(SPI3,General_Reset);
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40003c00 	.word	0x40003c00

08000c4c <Read_audio_fifo_out_level_reg_for_3_device_check_word>:

fi_error_check Read_audio_fifo_out_level_reg_for_3_device_check_word(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	volatile uint8_t check_word_level;


	check_word_level=Cbus_Read_Byte(SPI3,Audio_out_fifo_level);
 8000c52:	214f      	movs	r1, #79	; 0x4f
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x48>)
 8000c56:	f7ff fed4 	bl	8000a02 <Cbus_Read_Byte>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(0.5);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fdce 	bl	8001800 <HAL_Delay>

	 while(check_word_level != 3){
 8000c64:	bf00      	nop
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d00d      	beq.n	8000c8a <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x3e>
		 check_word_level=Cbus_Read_Byte(SPI3,Audio_out_fifo_level);
 8000c6e:	214f      	movs	r1, #79	; 0x4f
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x48>)
 8000c72:	f7ff fec6 	bl	8000a02 <Cbus_Read_Byte>
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
		 if(check_word_level>=3)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d901      	bls.n	8000c86 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x3a>
		 	{

		 		return true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e001      	b.n	8000c8a <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x3e>
                break;
		 	}
		 else{
			 return false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7ff      	b.n	8000c8a <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x3e>
		 }
	 }
return;
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40003c00 	.word	0x40003c00

08000c98 <Write_block>:


fi_error_check Write_block(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
    uint16_t wData;
    volatile uint8_t audio_in_fifo_level;
    uint32_t CHECKSUM_BLOCK_1=(DB1_CHK_HI<<16|DB1_CHK_LO );
 8000c9e:	4b8d      	ldr	r3, [pc, #564]	; (8000ed4 <Write_block+0x23c>)
 8000ca0:	613b      	str	r3, [r7, #16]
    uint32_t CHECKSUM_BLOCK_2 =(DB2_CHK_HI<<16|DB2_CHK_LO);
 8000ca2:	4b8d      	ldr	r3, [pc, #564]	; (8000ed8 <Write_block+0x240>)
 8000ca4:	60fb      	str	r3, [r7, #12]
    uint32_t CHECKSUM;

	uint16_t *db_pointer;
	uint16_t  length,datalength;
	db_pointer = db1;
 8000ca6:	4b8d      	ldr	r3, [pc, #564]	; (8000edc <Write_block+0x244>)
 8000ca8:	61fb      	str	r3, [r7, #28]
    length=DB1_LEN;
 8000caa:	f24a 2370 	movw	r3, #41584	; 0xa270
 8000cae:	837b      	strh	r3, [r7, #26]

	for (int i = 0; i<=3; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00c      	b.n	8000cd0 <Write_block+0x38>
		{
			//Read bootloader garbage words from CBUS FIFO
		CBUS_CHIP_SElECT_LOW();
 8000cb6:	f7ff fd73 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
			wData = Cbus_Read_Byte(SPI3,Audio_out_fifo_data_word);
 8000cba:	214d      	movs	r1, #77	; 0x4d
 8000cbc:	4888      	ldr	r0, [pc, #544]	; (8000ee0 <Write_block+0x248>)
 8000cbe:	f7ff fea0 	bl	8000a02 <Cbus_Read_Byte>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	807b      	strh	r3, [r7, #2]
			CBUS_CHIP_SElECT_HIGH();
 8000cc6:	f7ff fd7b 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	for (int i = 0; i<=3; i++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	ddef      	ble.n	8000cb6 <Write_block+0x1e>
		}

	CBUS_CHIP_SElECT_LOW();
 8000cd6:	f7ff fd63 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB1_LEN);
 8000cda:	f24a 2270 	movw	r2, #41584	; 0xa270
 8000cde:	2149      	movs	r1, #73	; 0x49
 8000ce0:	487f      	ldr	r0, [pc, #508]	; (8000ee0 <Write_block+0x248>)
 8000ce2:	f7ff fde9 	bl	80008b8 <CbusWriteRegister>
	HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fd8a 	bl	8001800 <HAL_Delay>

	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB1_PTR);// writing data block 1 length to audio in fifo data word
 8000cec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf0:	2149      	movs	r1, #73	; 0x49
 8000cf2:	487b      	ldr	r0, [pc, #492]	; (8000ee0 <Write_block+0x248>)
 8000cf4:	f7ff fde0 	bl	80008b8 <CbusWriteRegister>
	HAL_Delay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fd81 	bl	8001800 <HAL_Delay>

	CBUS_CHIP_SElECT_HIGH();
 8000cfe:	f7ff fd5f 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(2);
 8000d02:	2002      	movs	r0, #2
 8000d04:	f000 fd7c 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000d08:	f7ff fd4a 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	audio_in_fifo_level = Cbus_Read_Byte(SPI3, Audio_in_fifo_level);
 8000d0c:	214b      	movs	r1, #75	; 0x4b
 8000d0e:	4874      	ldr	r0, [pc, #464]	; (8000ee0 <Write_block+0x248>)
 8000d10:	f7ff fe77 	bl	8000a02 <Cbus_Read_Byte>
 8000d14:	4603      	mov	r3, r0
 8000d16:	707b      	strb	r3, [r7, #1]
	CBUS_CHIP_SElECT_HIGH();
 8000d18:	f7ff fd52 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>


	if(length!=0) {
 8000d1c:	8b7b      	ldrh	r3, [r7, #26]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d03c      	beq.n	8000d9c <Write_block+0x104>
	while(length>0) {
 8000d22:	e038      	b.n	8000d96 <Write_block+0xfe>
		while (audio_in_fifo_level>0)
		{
				CBUS_CHIP_SElECT_LOW();
 8000d24:	f7ff fd3c 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				audio_in_fifo_level = Cbus_Read_Byte(SPI3, Audio_in_fifo_level);
 8000d28:	214b      	movs	r1, #75	; 0x4b
 8000d2a:	486d      	ldr	r0, [pc, #436]	; (8000ee0 <Write_block+0x248>)
 8000d2c:	f7ff fe69 	bl	8000a02 <Cbus_Read_Byte>
 8000d30:	4603      	mov	r3, r0
 8000d32:	707b      	strb	r3, [r7, #1]
				CBUS_CHIP_SElECT_HIGH();
 8000d34:	f7ff fd44 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
			if(audio_in_fifo_level==0) {
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <Write_block+0xb2>
		while (audio_in_fifo_level>0)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1ed      	bne.n	8000d24 <Write_block+0x8c>
 8000d48:	e000      	b.n	8000d4c <Write_block+0xb4>
				break;
 8000d4a:	bf00      	nop
			}
		}
		if(length>128){
 8000d4c:	8b7b      	ldrh	r3, [r7, #26]
 8000d4e:	2b80      	cmp	r3, #128	; 0x80
 8000d50:	d913      	bls.n	8000d7a <Write_block+0xe2>

		datalength=128;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	817b      	strh	r3, [r7, #10]
				CBUS_CHIP_SElECT_LOW();
 8000d56:	f7ff fd23 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				Cbus_Write_Word_stream(SPI3, 0x49, db_pointer, datalength);
 8000d5a:	897b      	ldrh	r3, [r7, #10]
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	2149      	movs	r1, #73	; 0x49
 8000d60:	485f      	ldr	r0, [pc, #380]	; (8000ee0 <Write_block+0x248>)
 8000d62:	f7ff fde8 	bl	8000936 <Cbus_Write_Word_stream>
				CBUS_CHIP_SElECT_HIGH();
 8000d66:	f7ff fd2b 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
			db_pointer=db_pointer+128;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d70:	61fb      	str	r3, [r7, #28]
			 length -= 128;
 8000d72:	8b7b      	ldrh	r3, [r7, #26]
 8000d74:	3b80      	subs	r3, #128	; 0x80
 8000d76:	837b      	strh	r3, [r7, #26]
 8000d78:	e00d      	b.n	8000d96 <Write_block+0xfe>
		}
		else
		    		{datalength = length;
 8000d7a:	8b7b      	ldrh	r3, [r7, #26]
 8000d7c:	817b      	strh	r3, [r7, #10]
				CBUS_CHIP_SElECT_LOW();
 8000d7e:	f7ff fd0f 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				Cbus_Write_Word_stream(SPI3, 0x49, db_pointer, datalength);
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	2149      	movs	r1, #73	; 0x49
 8000d88:	4855      	ldr	r0, [pc, #340]	; (8000ee0 <Write_block+0x248>)
 8000d8a:	f7ff fdd4 	bl	8000936 <Cbus_Write_Word_stream>
				CBUS_CHIP_SElECT_HIGH();
 8000d8e:	f7ff fd17 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
		    		length = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	837b      	strh	r3, [r7, #26]
	while(length>0) {
 8000d96:	8b7b      	ldrh	r3, [r7, #26]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1d1      	bne.n	8000d40 <Write_block+0xa8>
		    		}
	}
}

	 CBUS_CHIP_SElECT_LOW();
 8000d9c:	f7ff fd00 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
		  //wData = Cbus_Read_Byte(SPI3,IRQ_Status);
		  CHECKSUM = CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word)<<24;
 8000da0:	214d      	movs	r1, #77	; 0x4d
 8000da2:	484f      	ldr	r0, [pc, #316]	; (8000ee0 <Write_block+0x248>)
 8000da4:	f7ff fe69 	bl	8000a7a <CBUS_READ_TWO_WORDS>
 8000da8:	4603      	mov	r3, r0
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	607b      	str	r3, [r7, #4]
		  CHECKSUM |=CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word);
 8000dae:	214d      	movs	r1, #77	; 0x4d
 8000db0:	484b      	ldr	r0, [pc, #300]	; (8000ee0 <Write_block+0x248>)
 8000db2:	f7ff fe62 	bl	8000a7a <CBUS_READ_TWO_WORDS>
 8000db6:	4602      	mov	r2, r0
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	607b      	str	r3, [r7, #4]
		  CBUS_CHIP_SElECT_HIGH();
 8000dbe:	f7ff fcff 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>





			db_pointer = db2;
 8000dc2:	4b48      	ldr	r3, [pc, #288]	; (8000ee4 <Write_block+0x24c>)
 8000dc4:	61fb      	str	r3, [r7, #28]
	length = DB2_LEN;
 8000dc6:	f641 0310 	movw	r3, #6160	; 0x1810
 8000dca:	837b      	strh	r3, [r7, #26]

	if (length != 0) {
 8000dcc:	8b7b      	ldrh	r3, [r7, #26]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03c      	beq.n	8000e4c <Write_block+0x1b4>
		while (length > 0) {
 8000dd2:	e038      	b.n	8000e46 <Write_block+0x1ae>
			while (audio_in_fifo_level > 0) {
				CBUS_CHIP_SElECT_LOW();
 8000dd4:	f7ff fce4 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				audio_in_fifo_level = Cbus_Read_Byte(SPI3, Audio_in_fifo_level);
 8000dd8:	214b      	movs	r1, #75	; 0x4b
 8000dda:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <Write_block+0x248>)
 8000ddc:	f7ff fe11 	bl	8000a02 <Cbus_Read_Byte>
 8000de0:	4603      	mov	r3, r0
 8000de2:	707b      	strb	r3, [r7, #1]
				CBUS_CHIP_SElECT_HIGH();
 8000de4:	f7ff fcec 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
				if (audio_in_fifo_level == 0) {
 8000de8:	787b      	ldrb	r3, [r7, #1]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <Write_block+0x162>
			while (audio_in_fifo_level > 0) {
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1ed      	bne.n	8000dd4 <Write_block+0x13c>
 8000df8:	e000      	b.n	8000dfc <Write_block+0x164>
					break;
 8000dfa:	bf00      	nop
				}
			}
			if (length > 128) {
 8000dfc:	8b7b      	ldrh	r3, [r7, #26]
 8000dfe:	2b80      	cmp	r3, #128	; 0x80
 8000e00:	d913      	bls.n	8000e2a <Write_block+0x192>

				datalength = 128;
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	817b      	strh	r3, [r7, #10]
				CBUS_CHIP_SElECT_LOW();
 8000e06:	f7ff fccb 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				Cbus_Write_Word_stream(SPI3, 0x49, db_pointer, datalength);
 8000e0a:	897b      	ldrh	r3, [r7, #10]
 8000e0c:	69fa      	ldr	r2, [r7, #28]
 8000e0e:	2149      	movs	r1, #73	; 0x49
 8000e10:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <Write_block+0x248>)
 8000e12:	f7ff fd90 	bl	8000936 <Cbus_Write_Word_stream>
				CBUS_CHIP_SElECT_HIGH();
 8000e16:	f7ff fcd3 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
				db_pointer = db_pointer + 128;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e20:	61fb      	str	r3, [r7, #28]
				length -= 128;
 8000e22:	8b7b      	ldrh	r3, [r7, #26]
 8000e24:	3b80      	subs	r3, #128	; 0x80
 8000e26:	837b      	strh	r3, [r7, #26]
 8000e28:	e00d      	b.n	8000e46 <Write_block+0x1ae>
			} else {
				datalength = length;
 8000e2a:	8b7b      	ldrh	r3, [r7, #26]
 8000e2c:	817b      	strh	r3, [r7, #10]
				CBUS_CHIP_SElECT_LOW();
 8000e2e:	f7ff fcb7 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
				Cbus_Write_Word_stream(SPI3, 0x49, db_pointer, datalength);
 8000e32:	897b      	ldrh	r3, [r7, #10]
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	2149      	movs	r1, #73	; 0x49
 8000e38:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <Write_block+0x248>)
 8000e3a:	f7ff fd7c 	bl	8000936 <Cbus_Write_Word_stream>
				CBUS_CHIP_SElECT_HIGH();
 8000e3e:	f7ff fcbf 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
				length = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	837b      	strh	r3, [r7, #26]
		while (length > 0) {
 8000e46:	8b7b      	ldrh	r3, [r7, #26]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1d1      	bne.n	8000df0 <Write_block+0x158>
			}
		}
	}

	CBUS_CHIP_SElECT_LOW();
 8000e4c:	f7ff fca8 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	//wData = Cbus_Read_Byte(SPI3,IRQ_Status);
	CHECKSUM = CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word) << 24;
 8000e50:	214d      	movs	r1, #77	; 0x4d
 8000e52:	4823      	ldr	r0, [pc, #140]	; (8000ee0 <Write_block+0x248>)
 8000e54:	f7ff fe11 	bl	8000a7a <CBUS_READ_TWO_WORDS>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	061b      	lsls	r3, r3, #24
 8000e5c:	607b      	str	r3, [r7, #4]
	CHECKSUM |= CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word);
 8000e5e:	214d      	movs	r1, #77	; 0x4d
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <Write_block+0x248>)
 8000e62:	f7ff fe0a 	bl	8000a7a <CBUS_READ_TWO_WORDS>
 8000e66:	4602      	mov	r2, r0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	607b      	str	r3, [r7, #4]
	CBUS_CHIP_SElECT_HIGH();
 8000e6e:	f7ff fca7 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>

	CBUS_CHIP_SElECT_LOW();
 8000e72:	f7ff fc95 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, ACTIVATE_LEN);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2149      	movs	r1, #73	; 0x49
 8000e7a:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <Write_block+0x248>)
 8000e7c:	f7ff fd1c 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000e80:	f7ff fc9e 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 fcbb 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000e8a:	f7ff fc89 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, ACTIVATE_PTR);
 8000e8e:	f244 0210 	movw	r2, #16400	; 0x4010
 8000e92:	2149      	movs	r1, #73	; 0x49
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <Write_block+0x248>)
 8000e96:	f7ff fd0f 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000e9a:	f7ff fc91 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(1);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 fcae 	bl	8001800 <HAL_Delay>


	HAL_Delay(20);
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f000 fcab 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000eaa:	f7ff fc79 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	HAL_Delay(300);
 8000eae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eb2:	f000 fca5 	bl	8001800 <HAL_Delay>
	wData = CBUS_READ_TWO_WORDS(SPI3,IRQ_Status)<<8;
 8000eb6:	217e      	movs	r1, #126	; 0x7e
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <Write_block+0x248>)
 8000eba:	f7ff fdde 	bl	8000a7a <CBUS_READ_TWO_WORDS>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	807b      	strh	r3, [r7, #2]
	CBUS_CHIP_SElECT_HIGH();
 8000ec6:	f7ff fc7b 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>

}
 8000eca:	bf00      	nop
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	ffffce46 	.word	0xffffce46
 8000ed8:	001022f6 	.word	0x001022f6
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	40003c00 	.word	0x40003c00
 8000ee4:	200144e0 	.word	0x200144e0

08000ee8 <CBUS_ENABLE>:

static inline void CBUS_ENABLE(SPI_TypeDef *SPI_PORT){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	SPI_PORT->CR1 |= SPI_CR1_SPE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f0e:	f000 fc02 	bl	8001716 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f12:	f000 f89d 	bl	8001050 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f16:	f000 f999 	bl	800124c <MX_GPIO_Init>
	CBUS_INIT();
 8000f1a:	f7ff fc37 	bl	800078c <CBUS_INIT>
	MX_LPUART1_UART_Init();
 8000f1e:	f000 f8fb 	bl	8001118 <MX_LPUART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000f22:	f000 f965 	bl	80011f0 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000f26:	f000 f925 	bl	8001174 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */



	enable_codec_boot_control_gpios();
 8000f2a:	f7ff fe1f 	bl	8000b6c <enable_codec_boot_control_gpios>
	set_boot_en1_en2_high();
 8000f2e:	f7ff fe57 	bl	8000be0 <set_boot_en1_en2_high>
	Cbus_Config(SPI3);
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <main+0x13c>)
 8000f34:	f7ff fc64 	bl	8000800 <Cbus_Config>
    CBUS_ENABLE(SPI3);
 8000f38:	4842      	ldr	r0, [pc, #264]	; (8001044 <main+0x13c>)
 8000f3a:	f7ff ffd5 	bl	8000ee8 <CBUS_ENABLE>
	CBUS_CHIP_SElECT_HIGH();
 8000f3e:	f7ff fc3f 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000f42:	f7ff fc4d 	bl	80007e0 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>

	// input codec setting start

	HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fc5a 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000f4c:	f7ff fc28 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	General_Reset_to_CMX72619();
 8000f50:	f7ff fe72 	bl	8000c38 <General_Reset_to_CMX72619>
	CBUS_CHIP_SElECT_HIGH();
 8000f54:	f7ff fc34 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	; 0x32
 8000f5a:	f000 fc51 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000f5e:	f7ff fc1f 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>

	if(Read_audio_fifo_out_level_reg_for_3_device_check_word()){
 8000f62:	f7ff fe73 	bl	8000c4c <Read_audio_fifo_out_level_reg_for_3_device_check_word>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <main+0x6c>
		check[5]="ok";
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <main+0x140>)
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	717b      	strb	r3, [r7, #5]
 8000f72:	e002      	b.n	8000f7a <main+0x72>
	}
	else{
		check[5]="nook";
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <main+0x144>)
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	717b      	strb	r3, [r7, #5]
	}
	CBUS_CHIP_SElECT_HIGH();
 8000f7a:	f7ff fc21 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f000 fc3e 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000f84:	f7ff fc0c 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	if(Write_block()){
 8000f88:	f7ff fe86 	bl	8000c98 <Write_block>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <main+0x92>
		check[5]="ok";
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <main+0x140>)
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	717b      	strb	r3, [r7, #5]
 8000f98:	e002      	b.n	8000fa0 <main+0x98>
	}
	else{
		check[5]="nook";
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <main+0x144>)
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	717b      	strb	r3, [r7, #5]
	//Cbus_Write_Word_stream(SPI3, Audio_in_fifo_data_data_word, pointtoarray,size_of_array);
	//CBUS_CHIP_SElECT_HIGH();
   // input codec setting end
	//CODEC1_REG_SET();
//	OUTPUT_CODEC_RED_SET();
    set_boot_en1_en2_low();
 8000fa0:	f7ff fe34 	bl	8000c0c <set_boot_en1_en2_low>
	HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fc2b 	bl	8001800 <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000faa:	f7ff fbf9 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, MODE, 0x0222); //0024
 8000fae:	f240 2222 	movw	r2, #546	; 0x222
 8000fb2:	216b      	movs	r1, #107	; 0x6b
 8000fb4:	4823      	ldr	r0, [pc, #140]	; (8001044 <main+0x13c>)
 8000fb6:	f7ff fc7f 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000fba:	f7ff fc01 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000fbe:	2032      	movs	r0, #50	; 0x32
 8000fc0:	f000 fc1e 	bl	8001800 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000fc4:	f7ff fbec 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Input_type, 0x0024); //0024
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	2154      	movs	r1, #84	; 0x54
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <main+0x13c>)
 8000fce:	f7ff fc73 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000fd2:	f7ff fbf5 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000fd6:	2032      	movs	r0, #50	; 0x32
 8000fd8:	f000 fc12 	bl	8001800 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000fdc:	f7ff fbe0 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Output_type, 0x0024); //0024
 8000fe0:	2224      	movs	r2, #36	; 0x24
 8000fe2:	2156      	movs	r1, #86	; 0x56
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <main+0x13c>)
 8000fe6:	f7ff fc67 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000fea:	f7ff fbe9 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f000 fc06 	bl	8001800 <HAL_Delay>
	//CBUS_CHIP_SElECT_LOW();
	//CbusWriteRegister(SPI3, MODE, 0x0222); //0222
	//CBUS_CHIP_SElECT_HIGH();
	//HAL_Delay(50);

	CBUS_CHIP_SElECT_LOW();
 8000ff4:	f7ff fbd4 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, ANAIN_Coarse_GAIN, 0x0700); //0A66
 8000ff8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ffc:	21b1      	movs	r1, #177	; 0xb1
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <main+0x13c>)
 8001000:	f7ff fc5a 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8001004:	f7ff fbdc 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f000 fbf9 	bl	8001800 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 800100e:	f7ff fbc7 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, ANAIN_Config, 0x0A09); //0A66
 8001012:	f640 2209 	movw	r2, #2569	; 0xa09
 8001016:	21b0      	movs	r1, #176	; 0xb0
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <main+0x13c>)
 800101a:	f7ff fc4d 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 800101e:	f7ff fbcf 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f000 fbec 	bl	8001800 <HAL_Delay>

	//CBUS_CHIP_SElECT_LOW();
	//CbusWriteRegister(SPI3, Fine_Gain_Channel_1, 0x0080); //0A66
	//CBUS_CHIP_SElECT_HIGH();
	//HAL_Delay(50);
	CBUS_CHIP_SElECT_LOW();
 8001028:	f7ff fbba 	bl	80007a0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, ANAOUT_CONFIG, 0x0A66); //0A66
 800102c:	f640 2266 	movw	r2, #2662	; 0xa66
 8001030:	21b3      	movs	r1, #179	; 0xb3
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <main+0x13c>)
 8001034:	f7ff fc40 	bl	80008b8 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8001038:	f7ff fbc2 	bl	80007c0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f000 fbdf 	bl	8001800 <HAL_Delay>

while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x13a>
 8001044:	40003c00 	.word	0x40003c00
 8001048:	080047dc 	.word	0x080047dc
 800104c:	080047e0 	.word	0x080047e0

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	; 0x58
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2244      	movs	r2, #68	; 0x44
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fba8 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001072:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001076:	f000 ffdd 	bl	8002034 <HAL_PWREx_ControlVoltageScaling>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001080:	f000 f97c 	bl	800137c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001084:	f000 ffb8 	bl	8001ff8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <SystemClock_Config+0xc4>)
 800108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <SystemClock_Config+0xc4>)
 8001090:	f023 0318 	bic.w	r3, r3, #24
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001098:	2314      	movs	r3, #20
 800109a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010b8:	2328      	movs	r3, #40	; 0x28
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f827 	bl	8002120 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010d8:	f000 f950 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	2303      	movs	r3, #3
 80010e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2104      	movs	r1, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fc2b 	bl	8002954 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001104:	f000 f93a 	bl	800137c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001108:	f002 f944 	bl	8003394 <HAL_RCCEx_EnableMSIPLLMode>
}
 800110c:	bf00      	nop
 800110e:	3758      	adds	r7, #88	; 0x58
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000

08001118 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <MX_LPUART1_UART_Init+0x54>)
 8001120:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_LPUART1_UART_Init+0x58>)
 8001126:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 800112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800112e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_LPUART1_UART_Init+0x50>)
 8001156:	f002 fb9e 	bl	8003896 <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 f90c 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2001752c 	.word	0x2001752c
 800116c:	40008000 	.word	0x40008000
 8001170:	00033324 	.word	0x00033324

08001174 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_SPI1_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_SPI1_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_SPI1_Init+0x74>)
 8001180:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001184:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SPI1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI1_Init+0x74>)
 800118e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001192:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI1_Init+0x74>)
 8001196:	2202      	movs	r2, #2
 8001198:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_SPI1_Init+0x74>)
 800119c:	2201      	movs	r2, #1
 800119e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_SPI1_Init+0x74>)
 80011d4:	f002 fabc 	bl	8003750 <HAL_SPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011de:	f000 f8cd 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200175b0 	.word	0x200175b0
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	2206      	movs	r2, #6
 8001200:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001204:	2202      	movs	r2, #2
 8001206:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120a:	2202      	movs	r2, #2
 800120c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001210:	2201      	movs	r2, #1
 8001212:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001222:	2201      	movs	r2, #1
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2201      	movs	r2, #1
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	f000 fd98 	bl	8001d68 <HAL_PCD_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800123e:	f000 f89d 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20017614 	.word	0x20017614

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_GPIO_Init+0x120>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a41      	ldr	r2, [pc, #260]	; (800136c <MX_GPIO_Init+0x120>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_GPIO_Init+0x120>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_GPIO_Init+0x120>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a3b      	ldr	r2, [pc, #236]	; (800136c <MX_GPIO_Init+0x120>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <MX_GPIO_Init+0x120>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <MX_GPIO_Init+0x120>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a35      	ldr	r2, [pc, #212]	; (800136c <MX_GPIO_Init+0x120>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <MX_GPIO_Init+0x120>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <MX_GPIO_Init+0x120>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a2f      	ldr	r2, [pc, #188]	; (800136c <MX_GPIO_Init+0x120>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <MX_GPIO_Init+0x120>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_GPIO_Init+0x120>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a29      	ldr	r2, [pc, #164]	; (800136c <MX_GPIO_Init+0x120>)
 80012c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_GPIO_Init+0x120>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80012da:	f000 ff11 	bl	8002100 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012e4:	4822      	ldr	r0, [pc, #136]	; (8001370 <MX_GPIO_Init+0x124>)
 80012e6:	f000 fd27 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	4821      	ldr	r0, [pc, #132]	; (8001374 <MX_GPIO_Init+0x128>)
 80012f0:	f000 fd22 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	481b      	ldr	r0, [pc, #108]	; (8001378 <MX_GPIO_Init+0x12c>)
 800130c:	f000 fb82 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001310:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_GPIO_Init+0x124>)
 800132a:	f000 fb73 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800132e:	2320      	movs	r3, #32
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_GPIO_Init+0x128>)
 8001342:	f000 fb67 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_GPIO_Init+0x128>)
 800135e:	f000 fb59 	bl	8001a14 <HAL_GPIO_Init>

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400
 8001374:	48001800 	.word	0x48001800
 8001378:	48000800 	.word	0x48000800

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_MspInit+0x44>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_MspInit+0x44>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x44>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ac      	sub	sp, #176	; 0xb0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	228c      	movs	r2, #140	; 0x8c
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f9df 	bl	80047b4 <memset>
  if(huart->Instance==LPUART1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_UART_MspInit+0xb4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d13d      	bne.n	800147c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001400:	2320      	movs	r3, #32
 8001402:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fcc5 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001418:	f7ff ffb0 	bl	800137c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_UART_MspInit+0xb8>)
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_UART_MspInit+0xb8>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_UART_MspInit+0xb8>)
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_UART_MspInit+0xb8>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_UART_MspInit+0xb8>)
 800143a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_UART_MspInit+0xb8>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800144c:	f000 fe58 	bl	8002100 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001450:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800146a:	2308      	movs	r3, #8
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_UART_MspInit+0xbc>)
 8001478:	f000 facc 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37b0      	adds	r7, #176	; 0xb0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40008000 	.word	0x40008000
 8001488:	40021000 	.word	0x40021000
 800148c:	48001800 	.word	0x48001800

08001490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_SPI_MspInit+0x7c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014bc:	6613      	str	r3, [r2, #96]	; 0x60
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80014e2:	23c2      	movs	r3, #194	; 0xc2
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f2:	2305      	movs	r3, #5
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001500:	f000 fa88 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013000 	.word	0x40013000
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ae      	sub	sp, #184	; 0xb8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	228c      	movs	r2, #140	; 0x8c
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f93d 	bl	80047b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001542:	d17c      	bne.n	800163e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001548:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800154a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800155a:	2318      	movs	r3, #24
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800156a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fc11 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001580:	f7ff fefc 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_PCD_MspInit+0x134>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800159c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015b6:	230a      	movs	r3, #10
 80015b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f000 fa25 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f000 fa14 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_PCD_MspInit+0x134>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_PCD_MspInit+0x134>)
 80015f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_PCD_MspInit+0x134>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d114      	bne.n	800163a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	6593      	str	r3, [r2, #88]	; 0x58
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_PCD_MspInit+0x134>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001628:	f000 fd5a 	bl	80020e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_PCD_MspInit+0x134>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_PCD_MspInit+0x134>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001636:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001638:	e001      	b.n	800163e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800163a:	f000 fd51 	bl	80020e0 <HAL_PWREx_EnableVddUSB>
}
 800163e:	bf00      	nop
 8001640:	37b8      	adds	r7, #184	; 0xb8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f892 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c8:	f7ff ffea 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f003 f83b 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7ff fc07 	bl	8000f08 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	2001750c 	.word	0x2001750c
  ldr r2, =_sidata
 8001708:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 800170c:	2001750c 	.word	0x2001750c
  ldr r4, =_ebss
 8001710:	20017b24 	.word	0x20017b24

08001714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_2_IRQHandler>

08001716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f943 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f80e 	bl	8001748 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e001      	b.n	800173c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001738:	f7ff fe26 	bl	8001388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	79fb      	ldrb	r3, [r7, #7]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_InitTick+0x70>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f941 	bl	80019fa <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d809      	bhi.n	8001798 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f919 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0x74>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e007      	b.n	80017a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e001      	b.n	80017a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20017508 	.word	0x20017508
 80017b8:	20017500 	.word	0x20017500
 80017bc:	20017504 	.word	0x20017504

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20017508 	.word	0x20017508
 80017e4:	20017b20 	.word	0x20017b20

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20017b20 	.word	0x20017b20

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffde 	bl	80017e8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20017508 	.word	0x20017508

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff47 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff5c 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffb0 	bl	8001968 <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	e166      	b.n	8001cf2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8158 	beq.w	8001cec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d005      	beq.n	8001a54 <HAL_GPIO_Init+0x40>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 0201 	and.w	r2, r3, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d017      	beq.n	8001af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d123      	bne.n	8001b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80b2 	beq.w	8001cec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	4a60      	ldr	r2, [pc, #384]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6613      	str	r3, [r2, #96]	; 0x60
 8001b94:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba0:	4a5c      	ldr	r2, [pc, #368]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bca:	d02b      	beq.n	8001c24 <HAL_GPIO_Init+0x210>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_GPIO_Init+0x304>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d025      	beq.n	8001c20 <HAL_GPIO_Init+0x20c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01f      	beq.n	8001c1c <HAL_GPIO_Init+0x208>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d019      	beq.n	8001c18 <HAL_GPIO_Init+0x204>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <HAL_GPIO_Init+0x310>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x200>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_GPIO_Init+0x314>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1fc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_GPIO_Init+0x318>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1f8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1f4>
 8001c04:	2307      	movs	r3, #7
 8001c06:	e00e      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c08:	2308      	movs	r3, #8
 8001c0a:	e00c      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	e00a      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c68:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c92:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f ae91 	bne.w	8001a24 <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	48001000 	.word	0x48001000
 8001d28:	48001400 	.word	0x48001400
 8001d2c:	48001800 	.word	0x48001800
 8001d30:	48001c00 	.word	0x48001c00
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	b08f      	sub	sp, #60	; 0x3c
 8001d6c:	af0a      	add	r7, sp, #40	; 0x28
 8001d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e116      	b.n	8001fa8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fbbd 	bl	8001514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fa4e 	bl	800425a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	687e      	ldr	r6, [r7, #4]
 8001dc6:	466d      	mov	r5, sp
 8001dc8:	f106 0410 	add.w	r4, r6, #16
 8001dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ddc:	1d33      	adds	r3, r6, #4
 8001dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f002 fa0e 	bl	8004202 <USB_CoreInit>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d7      	b.n	8001fa8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fa3c 	bl	800427c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e04a      	b.n	8001ea0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	333d      	adds	r3, #61	; 0x3d
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	333c      	adds	r3, #60	; 0x3c
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b298      	uxth	r0, r3
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3344      	adds	r3, #68	; 0x44
 8001e46:	4602      	mov	r2, r0
 8001e48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3340      	adds	r3, #64	; 0x40
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3348      	adds	r3, #72	; 0x48
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	334c      	adds	r3, #76	; 0x4c
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3354      	adds	r3, #84	; 0x54
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3af      	bcc.n	8001e0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e044      	b.n	8001f3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3b5      	bcc.n	8001eb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	687e      	ldr	r6, [r7, #4]
 8001f4c:	466d      	mov	r5, sp
 8001f4e:	f106 0410 	add.w	r4, r6, #16
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f62:	1d33      	adds	r3, r6, #4
 8001f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f002 f9d4 	bl	8004314 <USB_DevInit>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e014      	b.n	8001fa8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f80a 	bl	8001fb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fb80 	bl	80046a6 <USB_DevDisconnect>

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	f043 0303 	orr.w	r3, r3, #3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40007000 	.word	0x40007000

08002018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_PWREx_GetVoltageRange+0x18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40007000 	.word	0x40007000

08002034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d130      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d038      	beq.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2232      	movs	r2, #50	; 0x32
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002078:	e002      	b.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3b01      	subs	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208c:	d102      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f2      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	d110      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e00f      	b.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d007      	beq.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020bc:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000
 80020d8:	20017500 	.word	0x20017500
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	6053      	str	r3, [r2, #4]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_PWREx_EnableVddIO2+0x1c>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6053      	str	r3, [r2, #4]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000

08002120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f000 bc08 	b.w	8002944 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002134:	4b96      	ldr	r3, [pc, #600]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213e:	4b94      	ldr	r3, [pc, #592]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80e4 	beq.w	800231e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_RCC_OscConfig+0x4c>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	f040 808b 	bne.w	800227a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 8087 	bne.w	800227a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216c:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x64>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e3df      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	4b81      	ldr	r3, [pc, #516]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_RCC_OscConfig+0x7e>
 8002194:	4b7e      	ldr	r3, [pc, #504]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	e005      	b.n	80021aa <HAL_RCC_OscConfig+0x8a>
 800219e:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d223      	bcs.n	80021f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd92 	bl	8002cdc <RCC_SetFlashLatencyFromMSIRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e3c0      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a72      	ldr	r2, [pc, #456]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b70      	ldr	r3, [pc, #448]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	496d      	ldr	r1, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e0:	4b6b      	ldr	r3, [pc, #428]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	4968      	ldr	r1, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
 80021f4:	e025      	b.n	8002242 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f6:	4b66      	ldr	r3, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4960      	ldr	r1, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	495b      	ldr	r1, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd52 	bl	8002cdc <RCC_SetFlashLatencyFromMSIRange>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e380      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002242:	f000 fc87 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4950      	ldr	r1, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x274>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_RCC_OscConfig+0x278>)
 8002260:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002262:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fa6e 	bl	8001748 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d052      	beq.n	800231c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	e364      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d032      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002282:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228e:	f7ff faab 	bl	80017e8 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002296:	f7ff faa7 	bl	80017e8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e34d      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a35      	ldr	r2, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b33      	ldr	r3, [pc, #204]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4930      	ldr	r1, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	492b      	ldr	r1, [pc, #172]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e01a      	b.n	800231e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a28      	ldr	r2, [pc, #160]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fa78 	bl	80017e8 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fc:	f7ff fa74 	bl	80017e8 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e31a      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1dc>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d073      	beq.n	8002412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x21c>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d10e      	bne.n	8002354 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d063      	beq.n	8002410 <HAL_RCC_OscConfig+0x2f0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d15f      	bne.n	8002410 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e2f7      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x24c>
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e025      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d114      	bne.n	80023a0 <HAL_RCC_OscConfig+0x280>
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a02      	ldr	r2, [pc, #8]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 8002390:	40021000 	.word	0x40021000
 8002394:	080047e8 	.word	0x080047e8
 8002398:	20017500 	.word	0x20017500
 800239c:	20017504 	.word	0x20017504
 80023a0:	4ba0      	ldr	r3, [pc, #640]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9f      	ldr	r2, [pc, #636]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b9d      	ldr	r3, [pc, #628]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a9c      	ldr	r2, [pc, #624]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fa12 	bl	80017e8 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fa0e 	bl	80017e8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e2b4      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2a8>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff f9fe 	bl	80017e8 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff f9fa 	bl	80017e8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e2a0      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2d0>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d060      	beq.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x310>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d119      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d116      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002430:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x328>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e27d      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	4973      	ldr	r1, [pc, #460]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	e040      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d023      	beq.n	80024ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7ff f9b9 	bl	80017e8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff f9b5 	bl	80017e8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e25b      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	495f      	ldr	r1, [pc, #380]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e018      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5c      	ldr	r2, [pc, #368]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7ff f995 	bl	80017e8 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7ff f991 	bl	80017e8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e237      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03c      	beq.n	8002566 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01c      	beq.n	800252e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f4:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fa:	4a4a      	ldr	r2, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7ff f970 	bl	80017e8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff f96c 	bl	80017e8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e212      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ef      	beq.n	800250c <HAL_RCC_OscConfig+0x3ec>
 800252c:	e01b      	b.n	8002566 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7ff f953 	bl	80017e8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7ff f94f 	bl	80017e8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1f5      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a6 	beq.w	80026c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	; 0x58
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259c:	2301      	movs	r3, #1
 800259e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d118      	bne.n	80025de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCC_OscConfig+0x508>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x508>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b8:	f7ff f916 	bl	80017e8 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7ff f912 	bl	80017e8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1b8      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_RCC_OscConfig+0x508>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d8>
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f6:	e029      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d115      	bne.n	800262c <HAL_RCC_OscConfig+0x50c>
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	4a03      	ldr	r2, [pc, #12]	; (8002624 <HAL_RCC_OscConfig+0x504>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	4a9c      	ldr	r2, [pc, #624]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800263c:	4b99      	ldr	r3, [pc, #612]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	4a98      	ldr	r2, [pc, #608]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7ff f8c8 	bl	80017e8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff f8c4 	bl	80017e8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e168      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002672:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ed      	beq.n	800265c <HAL_RCC_OscConfig+0x53c>
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff f8b1 	bl	80017e8 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7ff f8ad 	bl	80017e8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e151      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a0:	4b80      	ldr	r3, [pc, #512]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ed      	bne.n	800268a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b7b      	ldr	r3, [pc, #492]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03c      	beq.n	8002746 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80026d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026da:	4a72      	ldr	r2, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff f880 	bl	80017e8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ec:	f7ff f87c 	bl	80017e8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e122      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026fe:	4b69      	ldr	r3, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x5cc>
 800270c:	e01b      	b.n	8002746 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800270e:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f863 	bl	80017e8 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002726:	f7ff f85f 	bl	80017e8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e105      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002738:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800273a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80f9 	beq.w	8002942 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	2b02      	cmp	r3, #2
 8002756:	f040 80cf 	bne.w	80028f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800275a:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	429a      	cmp	r2, r3
 800276c:	d12c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	3b01      	subs	r3, #1
 800277a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d123      	bne.n	80027c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d11b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d113      	bne.n	80027c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d109      	bne.n	80027c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d071      	beq.n	80028ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d068      	beq.n	80028a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ce:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027da:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0ac      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f6:	f7fe fff7 	bl	80017e8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fff3 	bl	80017e8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e099      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCC_OscConfig+0x788>)
 8002822:	4013      	ands	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800282c:	3a01      	subs	r2, #1
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002836:	0212      	lsls	r2, r2, #8
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800283e:	0852      	lsrs	r2, r2, #1
 8002840:	3a01      	subs	r2, #1
 8002842:	0552      	lsls	r2, r2, #21
 8002844:	4311      	orrs	r1, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800284a:	0852      	lsrs	r2, r2, #1
 800284c:	3a01      	subs	r2, #1
 800284e:	0652      	lsls	r2, r2, #25
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002856:	06d2      	lsls	r2, r2, #27
 8002858:	430a      	orrs	r2, r1
 800285a:	4912      	ldr	r1, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002878:	f7fe ffb6 	bl	80017e8 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe ffb2 	bl	80017e8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e058      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_RCC_OscConfig+0x784>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289e:	e050      	b.n	8002942 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04f      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d144      	bne.n	8002942 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a23      	ldr	r2, [pc, #140]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d0:	f7fe ff8a 	bl	80017e8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe ff86 	bl	80017e8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e02c      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x7b8>
 80028f6:	e024      	b.n	8002942 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d01f      	beq.n	800293e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 8002904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe ff6d 	bl	80017e8 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe ff69 	bl	80017e8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e00f      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4905      	ldr	r1, [pc, #20]	; (800294c <HAL_RCC_OscConfig+0x82c>)
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x830>)
 8002938:	4013      	ands	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
 800293c:	e001      	b.n	8002942 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	feeefffc 	.word	0xfeeefffc

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0e7      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b75      	ldr	r3, [pc, #468]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b72      	ldr	r3, [pc, #456]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4970      	ldr	r1, [pc, #448]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b6e      	ldr	r3, [pc, #440]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cf      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d010      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d908      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4960      	ldr	r1, [pc, #384]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d04c      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d121      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0a6      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	4b54      	ldr	r3, [pc, #336]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d115      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e09a      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e08e      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1a:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e086      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4943      	ldr	r1, [pc, #268]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fed4 	bl	80017e8 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fe fed0 	bl	80017e8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e06e      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d208      	bcs.n	8002a9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	492b      	ldr	r1, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d210      	bcs.n	8002aca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 0207 	bic.w	r2, r3, #7
 8002ab0:	4923      	ldr	r1, [pc, #140]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_ClockConfig+0x1ec>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e036      	b.n	8002b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4918      	ldr	r1, [pc, #96]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4910      	ldr	r1, [pc, #64]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b08:	f000 f824 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	490b      	ldr	r1, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1f4>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1fc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fe0b 	bl	8001748 <HAL_InitTick>
 8002b32:	4603      	mov	r3, r0
 8002b34:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b36:	7afb      	ldrb	r3, [r7, #11]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	080047e8 	.word	0x080047e8
 8002b4c:	20017500 	.word	0x20017500
 8002b50:	20017504 	.word	0x20017504

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6c:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d121      	bne.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d11e      	bne.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bcc:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	e004      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bd8:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d134      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0xa6>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d003      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0xac>
 8002bf8:	e005      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bfc:	617b      	str	r3, [r7, #20]
      break;
 8002bfe:	e005      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c02:	617b      	str	r3, [r7, #20]
      break;
 8002c04:	e002      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	617b      	str	r3, [r7, #20]
      break;
 8002c0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	3301      	adds	r3, #1
 8002c18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	fb03 f202 	mul.w	r2, r3, r2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	0e5b      	lsrs	r3, r3, #25
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08004800 	.word	0x08004800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20017500 	.word	0x20017500

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	080047f8 	.word	0x080047f8

08002cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cb4:	f7ff ffda 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0adb      	lsrs	r3, r3, #11
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4904      	ldr	r1, [pc, #16]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	080047f8 	.word	0x080047f8

08002cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf4:	f7ff f990 	bl	8002018 <HAL_PWREx_GetVoltageRange>
 8002cf8:	6178      	str	r0, [r7, #20]
 8002cfa:	e014      	b.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d14:	f7ff f980 	bl	8002018 <HAL_PWREx_GetVoltageRange>
 8002d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2c:	d10b      	bne.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d919      	bls.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2ba0      	cmp	r3, #160	; 0xa0
 8002d38:	d902      	bls.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e013      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d40:	2301      	movs	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e010      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d902      	bls.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e00a      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d102      	bne.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d58:	2302      	movs	r3, #2
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e004      	b.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d101      	bne.n	8002d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d64:	2301      	movs	r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 0207 	bic.w	r2, r3, #7
 8002d70:	4909      	ldr	r1, [pc, #36]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d001      	beq.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da8:	2300      	movs	r3, #0
 8002daa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d041      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc0:	d02a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dc6:	d824      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dd2:	d81e      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dde:	e018      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002de0:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a85      	ldr	r2, [pc, #532]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dec:	e015      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fadd 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3320      	adds	r3, #32
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fbc6 	bl	8003598 <RCCEx_PLLSAI2_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	74fb      	strb	r3, [r7, #19]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e20:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e2e:	4973      	ldr	r1, [pc, #460]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d041      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e50:	d02a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e56:	d824      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e5c:	d008      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e62:	d81e      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e6e:	e018      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e70:	4b62      	ldr	r3, [pc, #392]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7c:	e015      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fa95 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8e:	e00c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3320      	adds	r3, #32
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fb7e 	bl	8003598 <RCCEx_PLLSAI2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ebe:	494f      	ldr	r1, [pc, #316]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a0 	beq.w	800301a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6593      	str	r3, [r2, #88]	; 0x58
 8002f00:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fc64 	bl	80017e8 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f22:	e009      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7fe fc60 	bl	80017e8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	74fb      	strb	r3, [r7, #19]
        break;
 8002f36:	e005      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f38:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ef      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d15c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01f      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d019      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe fc1f 	bl	80017e8 <HAL_GetTick>
 8002faa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fc1b 	bl	80017e8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d902      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc4:	e006      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ec      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ff2:	e009      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
 8002ff8:	e006      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003008:	7c7b      	ldrb	r3, [r7, #17]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300e:	4ba6      	ldr	r3, [pc, #664]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4aa5      	ldr	r2, [pc, #660]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003026:	4ba0      	ldr	r3, [pc, #640]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f023 0203 	bic.w	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	499c      	ldr	r1, [pc, #624]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003048:	4b97      	ldr	r3, [pc, #604]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 020c 	bic.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	4994      	ldr	r1, [pc, #592]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800306a:	4b8f      	ldr	r3, [pc, #572]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	498b      	ldr	r1, [pc, #556]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800308c:	4b86      	ldr	r3, [pc, #536]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4983      	ldr	r1, [pc, #524]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ae:	4b7e      	ldr	r3, [pc, #504]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	497a      	ldr	r1, [pc, #488]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d0:	4b75      	ldr	r3, [pc, #468]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4972      	ldr	r1, [pc, #456]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	4969      	ldr	r1, [pc, #420]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003114:	4b64      	ldr	r3, [pc, #400]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003122:	4961      	ldr	r1, [pc, #388]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003136:	4b5c      	ldr	r3, [pc, #368]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	4958      	ldr	r1, [pc, #352]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	4950      	ldr	r1, [pc, #320]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800317a:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4947      	ldr	r1, [pc, #284]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800319e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	493f      	ldr	r1, [pc, #252]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d028      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031be:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031dc:	d106      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031de:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031e8:	60d3      	str	r3, [r2, #12]
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f8d9 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d028      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323a:	d106      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e011      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003252:	d10c      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8aa 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d02a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003298:	d108      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329a:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a02      	ldr	r2, [pc, #8]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a4:	60d3      	str	r3, [r2, #12]
 80032a6:	e013      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80032a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f879 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02f      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ea:	4929      	ldr	r1, [pc, #164]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032fa:	d10d      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3304      	adds	r3, #4
 8003300:	2102      	movs	r1, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f856 	bl	80033b4 <RCCEx_PLLSAI1_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	74bb      	strb	r3, [r7, #18]
 8003316:	e011      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3320      	adds	r3, #32
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f935 	bl	8003598 <RCCEx_PLLSAI2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003358:	490d      	ldr	r1, [pc, #52]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337c:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003384:	7cbb      	ldrb	r3, [r7, #18]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000

08003394 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033c2:	4b74      	ldr	r3, [pc, #464]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ce:	4b71      	ldr	r3, [pc, #452]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0203 	and.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10d      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
       ||
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033e6:	4b6b      	ldr	r3, [pc, #428]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
       ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d047      	beq.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e044      	b.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d018      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x86>
 8003408:	2b03      	cmp	r3, #3
 800340a:	d825      	bhi.n	8003458 <RCCEx_PLLSAI1_Config+0xa4>
 800340c:	2b01      	cmp	r3, #1
 800340e:	d002      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0x62>
 8003410:	2b02      	cmp	r3, #2
 8003412:	d009      	beq.n	8003428 <RCCEx_PLLSAI1_Config+0x74>
 8003414:	e020      	b.n	8003458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11d      	bne.n	800345e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003426:	e01a      	b.n	800345e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e013      	b.n	8003462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003456:	e006      	b.n	8003466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e004      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003466:	bf00      	nop
    }

    if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	430b      	orrs	r3, r1
 8003484:	4943      	ldr	r1, [pc, #268]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d17c      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3f      	ldr	r2, [pc, #252]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800349a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349c:	f7fe f9a4 	bl	80017e8 <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034a2:	e009      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a4:	f7fe f9a0 	bl	80017e8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d902      	bls.n	80034b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	73fb      	strb	r3, [r7, #15]
        break;
 80034b6:	e005      	b.n	80034c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ef      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d15f      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6892      	ldr	r2, [r2, #8]
 80034e0:	0211      	lsls	r1, r2, #8
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	06d2      	lsls	r2, r2, #27
 80034e8:	430a      	orrs	r2, r1
 80034ea:	492a      	ldr	r1, [pc, #168]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	610b      	str	r3, [r1, #16]
 80034f0:	e027      	b.n	8003542 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d112      	bne.n	800351e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003500:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	0211      	lsls	r1, r2, #8
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	0852      	lsrs	r2, r2, #1
 8003510:	3a01      	subs	r2, #1
 8003512:	0552      	lsls	r2, r2, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	491f      	ldr	r1, [pc, #124]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	610b      	str	r3, [r1, #16]
 800351c:	e011      	b.n	8003542 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	0211      	lsls	r1, r2, #8
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6952      	ldr	r2, [r2, #20]
 8003534:	0852      	lsrs	r2, r2, #1
 8003536:	3a01      	subs	r2, #1
 8003538:	0652      	lsls	r2, r2, #25
 800353a:	430a      	orrs	r2, r1
 800353c:	4915      	ldr	r1, [pc, #84]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800354c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f94b 	bl	80017e8 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003554:	e009      	b.n	800356a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003556:	f7fe f947 	bl	80017e8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
          break;
 8003568:	e005      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	4903      	ldr	r1, [pc, #12]	; (8003594 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000

08003598 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a6:	4b69      	ldr	r3, [pc, #420]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d018      	beq.n	80035e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0203 	and.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d10d      	bne.n	80035de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
       ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035ca:	4b60      	ldr	r3, [pc, #384]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
       ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d047      	beq.n	800366e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e044      	b.n	800366e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d018      	beq.n	800361e <RCCEx_PLLSAI2_Config+0x86>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d825      	bhi.n	800363c <RCCEx_PLLSAI2_Config+0xa4>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <RCCEx_PLLSAI2_Config+0x62>
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d009      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x74>
 80035f8:	e020      	b.n	800363c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360a:	e01a      	b.n	8003642 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e013      	b.n	8003646 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361e:	4b4b      	ldr	r3, [pc, #300]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800362a:	4b48      	ldr	r3, [pc, #288]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800363a:	e006      	b.n	800364a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e004      	b.n	800364c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800364a:	bf00      	nop
    }

    if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	430b      	orrs	r3, r1
 8003668:	4938      	ldr	r1, [pc, #224]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d166      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003674:	4b35      	ldr	r3, [pc, #212]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a34      	ldr	r2, [pc, #208]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fe f8b2 	bl	80017e8 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003686:	e009      	b.n	800369c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003688:	f7fe f8ae 	bl	80017e8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	73fb      	strb	r3, [r7, #15]
        break;
 800369a:	e005      	b.n	80036a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ef      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d149      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d110      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	06d2      	lsls	r2, r2, #27
 80036cc:	430a      	orrs	r2, r1
 80036ce:	491f      	ldr	r1, [pc, #124]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	614b      	str	r3, [r1, #20]
 80036d4:	e011      	b.n	80036fa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	0211      	lsls	r1, r2, #8
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6912      	ldr	r2, [r2, #16]
 80036ec:	0852      	lsrs	r2, r2, #1
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0652      	lsls	r2, r2, #25
 80036f2:	430a      	orrs	r2, r1
 80036f4:	4915      	ldr	r1, [pc, #84]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a13      	ldr	r2, [pc, #76]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe f86f 	bl	80017e8 <HAL_GetTick>
 800370a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800370c:	e009      	b.n	8003722 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800370e:	f7fe f86b 	bl	80017e8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d902      	bls.n	8003722 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	73fb      	strb	r3, [r7, #15]
          break;
 8003720:	e005      	b.n	800372e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ef      	beq.n	800370e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <RCCEx_PLLSAI2_Config+0x1b4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000

08003750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e095      	b.n	800388e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003772:	d009      	beq.n	8003788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	e005      	b.n	8003788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fe74 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c8:	d902      	bls.n	80037d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e002      	b.n	80037d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037de:	d007      	beq.n	80037f0 <HAL_SPI_Init+0xa0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	ea42 0103 	orr.w	r1, r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	f003 0204 	and.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e040      	b.n	800392a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd fd89 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	; 0x24
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f82d 	bl	8003934 <UART_SetConfig>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e022      	b.n	800392a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fad9 	bl	8003ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb60 	bl	8003fe8 <UART_CheckIdleState>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b08a      	sub	sp, #40	; 0x28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	431a      	orrs	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4ba4      	ldr	r3, [pc, #656]	; (8003bf4 <UART_SetConfig+0x2c0>)
 8003964:	4013      	ands	r3, r2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396c:	430b      	orrs	r3, r1
 800396e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a99      	ldr	r2, [pc, #612]	; (8003bf8 <UART_SetConfig+0x2c4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	4313      	orrs	r3, r2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a90      	ldr	r2, [pc, #576]	; (8003bfc <UART_SetConfig+0x2c8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d126      	bne.n	8003a0c <UART_SetConfig+0xd8>
 80039be:	4b90      	ldr	r3, [pc, #576]	; (8003c00 <UART_SetConfig+0x2cc>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d81b      	bhi.n	8003a04 <UART_SetConfig+0xd0>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0xa0>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039f5 	.word	0x080039f5
 80039dc:	080039ed 	.word	0x080039ed
 80039e0:	080039fd 	.word	0x080039fd
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e116      	b.n	8003c1a <UART_SetConfig+0x2e6>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f2:	e112      	b.n	8003c1a <UART_SetConfig+0x2e6>
 80039f4:	2304      	movs	r3, #4
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e10e      	b.n	8003c1a <UART_SetConfig+0x2e6>
 80039fc:	2308      	movs	r3, #8
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e10a      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a04:	2310      	movs	r3, #16
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e106      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7c      	ldr	r2, [pc, #496]	; (8003c04 <UART_SetConfig+0x2d0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d138      	bne.n	8003a88 <UART_SetConfig+0x154>
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <UART_SetConfig+0x2cc>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	d82d      	bhi.n	8003a80 <UART_SetConfig+0x14c>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0xf8>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a81 	.word	0x08003a81
 8003a38:	08003a81 	.word	0x08003a81
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a81 	.word	0x08003a81
 8003a44:	08003a81 	.word	0x08003a81
 8003a48:	08003a81 	.word	0x08003a81
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	08003a81 	.word	0x08003a81
 8003a54:	08003a81 	.word	0x08003a81
 8003a58:	08003a81 	.word	0x08003a81
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e0d8      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e0d4      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e0d0      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e0cc      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a80:	2310      	movs	r3, #16
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e0c8      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	; (8003c08 <UART_SetConfig+0x2d4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d125      	bne.n	8003ade <UART_SetConfig+0x1aa>
 8003a92:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <UART_SetConfig+0x2cc>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d016      	beq.n	8003ace <UART_SetConfig+0x19a>
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d818      	bhi.n	8003ad6 <UART_SetConfig+0x1a2>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d00a      	beq.n	8003abe <UART_SetConfig+0x18a>
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d814      	bhi.n	8003ad6 <UART_SetConfig+0x1a2>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <UART_SetConfig+0x182>
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d008      	beq.n	8003ac6 <UART_SetConfig+0x192>
 8003ab4:	e00f      	b.n	8003ad6 <UART_SetConfig+0x1a2>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abc:	e0ad      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac4:	e0a9      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003acc:	e0a5      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad4:	e0a1      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003adc:	e09d      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <UART_SetConfig+0x2d8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d125      	bne.n	8003b34 <UART_SetConfig+0x200>
 8003ae8:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <UART_SetConfig+0x2cc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003af2:	2bc0      	cmp	r3, #192	; 0xc0
 8003af4:	d016      	beq.n	8003b24 <UART_SetConfig+0x1f0>
 8003af6:	2bc0      	cmp	r3, #192	; 0xc0
 8003af8:	d818      	bhi.n	8003b2c <UART_SetConfig+0x1f8>
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d00a      	beq.n	8003b14 <UART_SetConfig+0x1e0>
 8003afe:	2b80      	cmp	r3, #128	; 0x80
 8003b00:	d814      	bhi.n	8003b2c <UART_SetConfig+0x1f8>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <UART_SetConfig+0x1d8>
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d008      	beq.n	8003b1c <UART_SetConfig+0x1e8>
 8003b0a:	e00f      	b.n	8003b2c <UART_SetConfig+0x1f8>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e082      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b14:	2302      	movs	r3, #2
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e07e      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e07a      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b24:	2308      	movs	r3, #8
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e076      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e072      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a35      	ldr	r2, [pc, #212]	; (8003c10 <UART_SetConfig+0x2dc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d12a      	bne.n	8003b94 <UART_SetConfig+0x260>
 8003b3e:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <UART_SetConfig+0x2cc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4c:	d01a      	beq.n	8003b84 <UART_SetConfig+0x250>
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b52:	d81b      	bhi.n	8003b8c <UART_SetConfig+0x258>
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b58:	d00c      	beq.n	8003b74 <UART_SetConfig+0x240>
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d815      	bhi.n	8003b8c <UART_SetConfig+0x258>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <UART_SetConfig+0x238>
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b68:	d008      	beq.n	8003b7c <UART_SetConfig+0x248>
 8003b6a:	e00f      	b.n	8003b8c <UART_SetConfig+0x258>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b72:	e052      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e04e      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e04a      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b84:	2308      	movs	r3, #8
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e046      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e042      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <UART_SetConfig+0x2c4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d13a      	bne.n	8003c14 <UART_SetConfig+0x2e0>
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <UART_SetConfig+0x2cc>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bac:	d01a      	beq.n	8003be4 <UART_SetConfig+0x2b0>
 8003bae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb2:	d81b      	bhi.n	8003bec <UART_SetConfig+0x2b8>
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	d00c      	beq.n	8003bd4 <UART_SetConfig+0x2a0>
 8003bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbe:	d815      	bhi.n	8003bec <UART_SetConfig+0x2b8>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <UART_SetConfig+0x298>
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	d008      	beq.n	8003bdc <UART_SetConfig+0x2a8>
 8003bca:	e00f      	b.n	8003bec <UART_SetConfig+0x2b8>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd2:	e022      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e01e      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e01a      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003be4:	2308      	movs	r3, #8
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e016      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003bec:	2310      	movs	r3, #16
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e012      	b.n	8003c1a <UART_SetConfig+0x2e6>
 8003bf4:	efff69f3 	.word	0xefff69f3
 8003bf8:	40008000 	.word	0x40008000
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004800 	.word	0x40004800
 8003c0c:	40004c00 	.word	0x40004c00
 8003c10:	40005000 	.word	0x40005000
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a9f      	ldr	r2, [pc, #636]	; (8003e9c <UART_SetConfig+0x568>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d17a      	bne.n	8003d1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d824      	bhi.n	8003c76 <UART_SetConfig+0x342>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x300>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c77 	.word	0x08003c77
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c67 	.word	0x08003c67
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c77 	.word	0x08003c77
 8003c54:	08003c6f 	.word	0x08003c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7ff f814 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	61f8      	str	r0, [r7, #28]
        break;
 8003c5e:	e010      	b.n	8003c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c60:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <UART_SetConfig+0x56c>)
 8003c62:	61fb      	str	r3, [r7, #28]
        break;
 8003c64:	e00d      	b.n	8003c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c66:	f7fe ff75 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8003c6a:	61f8      	str	r0, [r7, #28]
        break;
 8003c6c:	e009      	b.n	8003c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c72:	61fb      	str	r3, [r7, #28]
        break;
 8003c74:	e005      	b.n	8003c82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80fb 	beq.w	8003e80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d305      	bcc.n	8003ca6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d903      	bls.n	8003cae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cac:	e0e8      	b.n	8003e80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	022b      	lsls	r3, r5, #8
 8003cc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cc4:	0222      	lsls	r2, r4, #8
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6849      	ldr	r1, [r1, #4]
 8003cca:	0849      	lsrs	r1, r1, #1
 8003ccc:	2000      	movs	r0, #0
 8003cce:	4688      	mov	r8, r1
 8003cd0:	4681      	mov	r9, r0
 8003cd2:	eb12 0a08 	adds.w	sl, r2, r8
 8003cd6:	eb43 0b09 	adc.w	fp, r3, r9
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce8:	4650      	mov	r0, sl
 8003cea:	4659      	mov	r1, fp
 8003cec:	f7fc fa7e 	bl	80001ec <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfe:	d308      	bcc.n	8003d12 <UART_SetConfig+0x3de>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d06:	d204      	bcs.n	8003d12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e0b6      	b.n	8003e80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d18:	e0b2      	b.n	8003e80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d15e      	bne.n	8003de2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d828      	bhi.n	8003d7e <UART_SetConfig+0x44a>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x400>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003d7f 	.word	0x08003d7f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d7f 	.word	0x08003d7f
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe ff94 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	61f8      	str	r0, [r7, #28]
        break;
 8003d5e:	e014      	b.n	8003d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe ffa6 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 8003d64:	61f8      	str	r0, [r7, #28]
        break;
 8003d66:	e010      	b.n	8003d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <UART_SetConfig+0x56c>)
 8003d6a:	61fb      	str	r3, [r7, #28]
        break;
 8003d6c:	e00d      	b.n	8003d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fe fef1 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8003d72:	61f8      	str	r0, [r7, #28]
        break;
 8003d74:	e009      	b.n	8003d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e005      	b.n	8003d8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d077      	beq.n	8003e80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005a      	lsls	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	d916      	bls.n	8003dda <UART_SetConfig+0x4a6>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db2:	d212      	bcs.n	8003dda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f023 030f 	bic.w	r3, r3, #15
 8003dbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	8afb      	ldrh	r3, [r7, #22]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	8afa      	ldrh	r2, [r7, #22]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e052      	b.n	8003e80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003de0:	e04e      	b.n	8003e80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x506>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x4bc>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe ff36 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003e18:	61f8      	str	r0, [r7, #28]
        break;
 8003e1a:	e014      	b.n	8003e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe ff48 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 8003e20:	61f8      	str	r0, [r7, #28]
        break;
 8003e22:	e010      	b.n	8003e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <UART_SetConfig+0x56c>)
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e00d      	b.n	8003e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fe93 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8003e2e:	61f8      	str	r0, [r7, #28]
        break;
 8003e30:	e009      	b.n	8003e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61fb      	str	r3, [r7, #28]
        break;
 8003e38:	e005      	b.n	8003e46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e44:	bf00      	nop
    }

    if (pclk != 0U)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d019      	beq.n	8003e80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	085a      	lsrs	r2, r3, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	441a      	add	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	d909      	bls.n	8003e7a <UART_SetConfig+0x546>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d205      	bcs.n	8003e7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e002      	b.n	8003e80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40008000 	.word	0x40008000
 8003ea0:	00f42400 	.word	0x00f42400

08003ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01a      	beq.n	8003fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa2:	d10a      	bne.n	8003fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff8:	f7fd fbf6 	bl	80017e8 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d10e      	bne.n	800402a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800400c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f82d 	bl	800407a <UART_WaitOnFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e023      	b.n	8004072 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f817 	bl	800407a <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e00d      	b.n	8004072 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b09c      	sub	sp, #112	; 0x70
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408a:	e0a5      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	f000 80a1 	beq.w	80041d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd fba7 	bl	80017e8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <UART_WaitOnFlagUntilTimeout+0x32>
 80040a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d13e      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040c0:	667b      	str	r3, [r7, #100]	; 0x64
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	663b      	str	r3, [r7, #96]	; 0x60
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e067      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d04f      	beq.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d147      	bne.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004150:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
 8004172:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e6      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	613b      	str	r3, [r7, #16]
   return(result);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	66bb      	str	r3, [r7, #104]	; 0x68
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041a4:	623a      	str	r2, [r7, #32]
 80041a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	69f9      	ldr	r1, [r7, #28]
 80041aa:	6a3a      	ldr	r2, [r7, #32]
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e5      	bne.n	8004184 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e010      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f43f af4a 	beq.w	800408c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3770      	adds	r7, #112	; 0x70
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004202:	b084      	sub	sp, #16
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	f107 001c 	add.w	r0, r7, #28
 8004210:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa6f 	bl	8004704 <USB_CoreReset>
 8004226:	4603      	mov	r3, r0
 8004228:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800422a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
 800423c:	e005      	b.n	800424a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004256:	b004      	add	sp, #16
 8004258:	4770      	bx	lr

0800425a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d115      	bne.n	80042ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fd faa8 	bl	8001800 <HAL_Delay>
      ms++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa16 	bl	80046e8 <USB_GetMode>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d01e      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b31      	cmp	r3, #49	; 0x31
 80042c6:	d9f0      	bls.n	80042aa <USB_SetCurrentMode+0x2e>
 80042c8:	e01a      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fd fa8f 	bl	8001800 <HAL_Delay>
      ms++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9fd 	bl	80046e8 <USB_GetMode>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b31      	cmp	r3, #49	; 0x31
 80042f8:	d9f0      	bls.n	80042dc <USB_SetCurrentMode+0x60>
 80042fa:	e001      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e005      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b32      	cmp	r3, #50	; 0x32
 8004304:	d101      	bne.n	800430a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004314:	b084      	sub	sp, #16
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e009      	b.n	8004348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3340      	adds	r3, #64	; 0x40
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b0e      	cmp	r3, #14
 800434c:	d9f2      	bls.n	8004334 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11c      	bne.n	800438e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004362:	f043 0302 	orr.w	r3, r3, #2
 8004366:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e005      	b.n	800439a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	4619      	mov	r1, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	461a      	mov	r2, r3
 80043b6:	680b      	ldr	r3, [r1, #0]
 80043b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043ba:	2103      	movs	r1, #3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f959 	bl	8004674 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043c2:	2110      	movs	r1, #16
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8f1 	bl	80045ac <USB_FlushTxFifo>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f91d 	bl	8004614 <USB_FlushRxFifo>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	461a      	mov	r2, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	461a      	mov	r2, r3
 80043f8:	2300      	movs	r3, #0
 80043fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	461a      	mov	r2, r3
 8004404:	2300      	movs	r3, #0
 8004406:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	e043      	b.n	8004496 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004424:	d118      	bne.n	8004458 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	e013      	b.n	800446a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	461a      	mov	r2, r3
 8004450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e008      	b.n	800446a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	461a      	mov	r2, r3
 8004466:	2300      	movs	r3, #0
 8004468:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004488:	461a      	mov	r2, r3
 800448a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800448e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	3301      	adds	r3, #1
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3b7      	bcc.n	800440e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	e043      	b.n	800452c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ba:	d118      	bne.n	80044ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e013      	b.n	8004500 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	461a      	mov	r2, r3
 80044e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e008      	b.n	8004500 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	3301      	adds	r3, #1
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d3b7      	bcc.n	80044a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004546:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004554:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f043 0210 	orr.w	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <USB_DevInit+0x294>)
 8004568:	4313      	orrs	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f043 0208 	orr.w	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004596:	7dfb      	ldrb	r3, [r7, #23]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a2:	b004      	add	sp, #16
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	803c3800 	.word	0x803c3800

080045ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <USB_FlushTxFifo+0x64>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e01b      	b.n	8004604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	daf2      	bge.n	80045ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	019b      	lsls	r3, r3, #6
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a08      	ldr	r2, [pc, #32]	; (8004610 <USB_FlushTxFifo+0x64>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e006      	b.n	8004604 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d0f0      	beq.n	80045e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	00030d40 	.word	0x00030d40

08004614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <USB_FlushRxFifo+0x5c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e018      	b.n	8004664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	daf2      	bge.n	8004620 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2210      	movs	r2, #16
 8004642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <USB_FlushRxFifo+0x5c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e006      	b.n	8004664 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b10      	cmp	r3, #16
 8004660:	d0f0      	beq.n	8004644 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	00030d40 	.word	0x00030d40

08004674 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0301 	and.w	r3, r3, #1
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <USB_CoreReset+0x64>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e01b      	b.n	800475a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	daf2      	bge.n	8004710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f043 0201 	orr.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <USB_CoreReset+0x64>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d0f0      	beq.n	800473a <USB_CoreReset+0x36>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	00030d40 	.word	0x00030d40

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4d0d      	ldr	r5, [pc, #52]	; (80047a4 <__libc_init_array+0x38>)
 8004770:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	2600      	movs	r6, #0
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	4d0b      	ldr	r5, [pc, #44]	; (80047ac <__libc_init_array+0x40>)
 800477e:	4c0c      	ldr	r4, [pc, #48]	; (80047b0 <__libc_init_array+0x44>)
 8004780:	f000 f820 	bl	80047c4 <_init>
 8004784:	1b64      	subs	r4, r4, r5
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	2600      	movs	r6, #0
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f855 3b04 	ldr.w	r3, [r5], #4
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f855 3b04 	ldr.w	r3, [r5], #4
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	08004838 	.word	0x08004838
 80047a8:	08004838 	.word	0x08004838
 80047ac:	08004838 	.word	0x08004838
 80047b0:	0800483c 	.word	0x0800483c

080047b4 <memset>:
 80047b4:	4402      	add	r2, r0
 80047b6:	4603      	mov	r3, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	f803 1b01 	strb.w	r1, [r3], #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
