
spi_cbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000431c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004518  08004518  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  2000000c  0800452c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800452c  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001214e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002600  00000000  00000000  0003218a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00035708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029355  00000000  00000000  00036598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116dc  00000000  00000000  0005f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fada4  00000000  00000000  00070fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bd6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  0016bdc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080044b0 	.word	0x080044b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080044b0 	.word	0x080044b0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <CBUS_BUSY>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT,uint8_t addr);



static inline FlagStatus CBUS_BUSY(SPI_TypeDef *SPI_PORT) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 7)) ? SET : RESET;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>:

static inline FlagStatus CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 0)) ? SET : RESET;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf14      	ite	ne
 800052a:	2301      	movne	r3, #1
 800052c:	2300      	moveq	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <CBUS_ReceiveFrame>:

static inline uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint16_t RX_data;
	return RX_data =(uint16_t)(SSP_DR_BITMASK(*((volatile uint8_t*) &(SPI_PORT->DR))));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	330c      	adds	r3, #12
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	81fb      	strh	r3, [r7, #14]
 800054e:	89fb      	ldrh	r3, [r7, #14]
	//return RX_data=SPI_PORT->DR;

	//return (uint16_t) (SSP_DR_BITMASK(SPI_PORT->DR));
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <CBUS_SendFrame>:


static inline void CBUS_SendFrame(SPI_TypeDef *SPI_PORT, uint8_t tx_data)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
	*((volatile uint8_t*) &(SPI_PORT->DR)) =SSP_DR_BITMASK(tx_data); //(uint16_t*) *((volatile uint8_t*) &
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	330c      	adds	r3, #12
 800056c:	78fa      	ldrb	r2, [r7, #3]
 800056e:	701a      	strb	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <CBUS_TX_BUFFER_EMPTY_CHECK>:





static inline FlagStatus CBUS_TX_BUFFER_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 1)) ? SET : RESET;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf14      	ite	ne
 8000590:	2301      	movne	r3, #1
 8000592:	2300      	moveq	r3, #0
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <swap_uint16>:


static inline uint16_t swap_uint16( uint16_t val )
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	80fb      	strh	r3, [r7, #6]
    return (val << 8) | (val >> 8 );
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b21b      	sxth	r3, r3
 80005be:	b29b      	uxth	r3, r3
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <enable_clock_gpio_spi>:
 *      Author: Isfandyar Qureshi
 */
#include "cbus.h"

//working
void enable_clock_gpio_spi() {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN; //enabled G clocks
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <enable_clock_gpio_spi+0x28>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <enable_clock_gpio_spi+0x28>)
 80005d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005da:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI3EN; // enabled SPI3 clock;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <enable_clock_gpio_spi+0x28>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <enable_clock_gpio_spi+0x28>)
 80005e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <set_cbus_pins>:
//working
void set_cbus_pins() {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

	// chip select PG0 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE0_0;
 80005fc:	4b53      	ldr	r3, [pc, #332]	; (800074c <set_cbus_pins+0x154>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a52      	ldr	r2, [pc, #328]	; (800074c <set_cbus_pins+0x154>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE0_1);
 8000608:	4b50      	ldr	r3, [pc, #320]	; (800074c <set_cbus_pins+0x154>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a4f      	ldr	r2, [pc, #316]	; (800074c <set_cbus_pins+0x154>)
 800060e:	f023 0302 	bic.w	r3, r3, #2
 8000612:	6013      	str	r3, [r2, #0]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_1;
 8000614:	4b4d      	ldr	r3, [pc, #308]	; (800074c <set_cbus_pins+0x154>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a4c      	ldr	r2, [pc, #304]	; (800074c <set_cbus_pins+0x154>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED0_0);
 8000620:	4b4a      	ldr	r3, [pc, #296]	; (800074c <set_cbus_pins+0x154>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4a49      	ldr	r2, [pc, #292]	; (800074c <set_cbus_pins+0x154>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6093      	str	r3, [r2, #8]

	// chip select PG1 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE1_0;
 800062c:	4b47      	ldr	r3, [pc, #284]	; (800074c <set_cbus_pins+0x154>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a46      	ldr	r2, [pc, #280]	; (800074c <set_cbus_pins+0x154>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE1_1);
 8000638:	4b44      	ldr	r3, [pc, #272]	; (800074c <set_cbus_pins+0x154>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a43      	ldr	r2, [pc, #268]	; (800074c <set_cbus_pins+0x154>)
 800063e:	f023 0308 	bic.w	r3, r3, #8
 8000642:	6013      	str	r3, [r2, #0]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED1_1;
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <set_cbus_pins+0x154>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a40      	ldr	r2, [pc, #256]	; (800074c <set_cbus_pins+0x154>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED1_0);
 8000650:	4b3e      	ldr	r3, [pc, #248]	; (800074c <set_cbus_pins+0x154>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a3d      	ldr	r2, [pc, #244]	; (800074c <set_cbus_pins+0x154>)
 8000656:	f023 0304 	bic.w	r3, r3, #4
 800065a:	6093      	str	r3, [r2, #8]

	// output push pull
	GPIOG->OTYPER |= (GPIO_OTYPER_OT_0);
 800065c:	4b3b      	ldr	r3, [pc, #236]	; (800074c <set_cbus_pins+0x154>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a3a      	ldr	r2, [pc, #232]	; (800074c <set_cbus_pins+0x154>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6053      	str	r3, [r2, #4]
	//pulled up
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD0;
 8000668:	4b38      	ldr	r3, [pc, #224]	; (800074c <set_cbus_pins+0x154>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a37      	ldr	r2, [pc, #220]	; (800074c <set_cbus_pins+0x154>)
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8000674:	4b35      	ldr	r3, [pc, #212]	; (800074c <set_cbus_pins+0x154>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a34      	ldr	r2, [pc, #208]	; (800074c <set_cbus_pins+0x154>)
 800067a:	f023 030c 	bic.w	r3, r3, #12
 800067e:	60d3      	str	r3, [r2, #12]

	// PC9 alternate function SCK

	GPIOG->MODER &= ~(GPIO_MODER_MODER9_0);
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <set_cbus_pins+0x154>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a31      	ldr	r2, [pc, #196]	; (800074c <set_cbus_pins+0x154>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068a:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= GPIO_MODER_MODER9_1;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <set_cbus_pins+0x154>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2e      	ldr	r2, [pc, #184]	; (800074c <set_cbus_pins+0x154>)
 8000692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000696:	6013      	str	r3, [r2, #0]
	//  very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <set_cbus_pins+0x154>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <set_cbus_pins+0x154>)
 800069e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006a2:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED9_0);
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <set_cbus_pins+0x154>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <set_cbus_pins+0x154>)
 80006aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ae:	6093      	str	r3, [r2, #8]
	//sck ends

	// PG11 alternate function mosi
	//mosi config starts

	GPIOG->MODER |= GPIO_MODER_MODE11_1;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <set_cbus_pins+0x154>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <set_cbus_pins+0x154>)
 80006b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ba:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE11_0);
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <set_cbus_pins+0x154>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <set_cbus_pins+0x154>)
 80006c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006c6:	6013      	str	r3, [r2, #0]

	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_1;
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <set_cbus_pins+0x154>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4a1f      	ldr	r2, [pc, #124]	; (800074c <set_cbus_pins+0x154>)
 80006ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006d2:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED11_0);
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <set_cbus_pins+0x154>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <set_cbus_pins+0x154>)
 80006da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006de:	6093      	str	r3, [r2, #8]
	// pushpull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_11);
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <set_cbus_pins+0x154>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <set_cbus_pins+0x154>)
 80006e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ea:	6053      	str	r3, [r2, #4]

	//mosi config ends

	// PG10 alternate function miso
	GPIOG->MODER |= GPIO_MODER_MODE10_1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <set_cbus_pins+0x154>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <set_cbus_pins+0x154>)
 80006f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE10_0);
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <set_cbus_pins+0x154>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <set_cbus_pins+0x154>)
 80006fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000702:	6013      	str	r3, [r2, #0]
	//  high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <set_cbus_pins+0x154>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <set_cbus_pins+0x154>)
 800070a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800070e:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED10_0);
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <set_cbus_pins+0x154>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <set_cbus_pins+0x154>)
 8000716:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800071a:	6093      	str	r3, [r2, #8]
	// push pull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_10);
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <set_cbus_pins+0x154>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <set_cbus_pins+0x154>)
 8000722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000726:	6053      	str	r3, [r2, #4]
	// pulled down
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <set_cbus_pins+0x154>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <set_cbus_pins+0x154>)
 800072e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000732:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD10_0);
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <set_cbus_pins+0x154>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <set_cbus_pins+0x154>)
 800073a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800073e:	60d3      	str	r3, [r2, #12]
	//miso_ends

}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	48001800 	.word	0x48001800

08000750 <set_spi_portg_alternate_fun6>:

//working
void set_spi_portg_alternate_fun6() {
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	// pg9 10 11 alternation function 6 for spi3 0110
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_1);
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_2);
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_1);
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_2);
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000782:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_1);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 800078a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800078e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_2);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <set_spi_portg_alternate_fun6+0x58>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	48001800 	.word	0x48001800

080007ac <CBUS_INIT>:
//working
void CBUS_INIT() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	// pg9 sck pg10 miso pg11 mosi pg0 cs pg0

	enable_clock_gpio_spi();	//enabled G clocks // enabled SPI3 clock;
 80007b0:	f7ff ff0c 	bl	80005cc <enable_clock_gpio_spi>
	set_cbus_pins(); // set sck mosi miso chip select  alternate function and speed and output type
 80007b4:	f7ff ff20 	bl	80005f8 <set_cbus_pins>
	set_spi_portg_alternate_fun6(); //
 80007b8:	f7ff ffca 	bl	8000750 <set_spi_portg_alternate_fun6>

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <CBUS_CHIP_SElECT_LOW>:
//working
void CBUS_CHIP_SElECT_LOW() {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BR0;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ce:	6193      	str	r3, [r2, #24]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	48001800 	.word	0x48001800

080007e0 <CBUS_CHIP_SElECT_HIGH>:
//working
void CBUS_CHIP_SElECT_HIGH() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BS0;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6193      	str	r3, [r2, #24]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	48001800 	.word	0x48001800

08000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>:

void CBUS_CHIP_SElECT_OUPUT_CODEC_LOW() {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BR1;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW+0x1c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW+0x1c>)
 800080a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080e:	6193      	str	r3, [r2, #24]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	48001800 	.word	0x48001800

08000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>:

void CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH() {
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BS1;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	6193      	str	r3, [r2, #24]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	48001800 	.word	0x48001800

08000840 <Cbus_Config>:

// working configs cbus baud rate and other settings
void Cbus_Config(SPI_TypeDef *SPI_PORT) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

	//// fclk mhz 40mhz /64 ///10mhz for uncompressed clean voice
	SPI_PORT->CR1 &= ~ SPI_CR1_BR_2;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f023 0220 	bic.w	r2, r3, #32
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 |= SPI_CR1_BR_1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f043 0210 	orr.w	r2, r3, #16
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 &= ~ SPI_CR1_BR_0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0208 	bic.w	r2, r3, #8
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]

	//SPI_PORT-> mode 3

	SPI_PORT->CR1 |= SPI_CR1_CPOL | SPI_CR1_CPHA;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f043 0203 	orr.w	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	601a      	str	r2, [r3, #0]

	// FULL duplex
	SPI_PORT->CR1 &= ~SPI_CR1_RXONLY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	601a      	str	r2, [r3, #0]
	// msb first
	SPI_PORT->CR1 &= ~ SPI_CR1_LSBFIRST;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]

	//software slave
	SPI_PORT->CR1 |= SPI_CR1_SSM;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
	SPI_PORT->CR1 |= SPI_CR1_SSI;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]

	// master mode enabled
	SPI_PORT->CR1 |= SPI_CR1_MSTR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f043 0204 	orr.w	r2, r3, #4
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]

	// 8BIT DATA

	SPI_PORT->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	605a      	str	r2, [r3, #4]

	//SPI_PORT->

}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <CbusWriteRegister>:
	CBUS_SendFrame(SPI_PORT, addr);
	return;
}

void CbusWriteRegister(SPI_TypeDef *SPI_PORT, uint8_t Addr, uint16_t data) ///working
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
 80008d8:	4613      	mov	r3, r2
 80008da:	803b      	strh	r3, [r7, #0]
	uint16_t swapped = swap_uint16(data);
 80008dc:	883b      	ldrh	r3, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe5f 	bl	80005a2 <swap_uint16>
 80008e4:	4603      	mov	r3, r0
 80008e6:	81fb      	strh	r3, [r7, #14]
	uint8_t address_and_Value[3];
	uint8_t address = Addr;
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	737b      	strb	r3, [r7, #13]
	address_and_Value[2] = address;
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
 80008ee:	72bb      	strb	r3, [r7, #10]
	address_and_Value[1] = (swapped & 0xff);
 80008f0:	89fb      	ldrh	r3, [r7, #14]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	727b      	strb	r3, [r7, #9]
	address_and_Value[0] = ((swapped >> 8) & (0xff));
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	723b      	strb	r3, [r7, #8]
	//while(CBUS_BUSY(SPI_PORT));

	while (CBUS_BUSY(SPI_PORT)) {
 8000900:	bf00      	nop
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fdf4 	bl	80004f0 <CBUS_BUSY>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f9      	bne.n	8000902 <CbusWriteRegister+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090e:	b672      	cpsid	i
}
 8000910:	bf00      	nop
	};
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address_and_Value[2]);
 8000912:	7abb      	ldrb	r3, [r7, #10]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fe20 	bl	800055c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[1]);
 800091c:	7a7b      	ldrb	r3, [r7, #9]
 800091e:	4619      	mov	r1, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe1b 	bl	800055c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[0]);
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fe16 	bl	800055c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000930:	b662      	cpsie	i
}
 8000932:	bf00      	nop
	__enable_irq();
	while (CBUS_BUSY(SPI_PORT)) {
 8000934:	bf00      	nop
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fdda 	bl	80004f0 <CBUS_BUSY>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f9      	bne.n	8000936 <CbusWriteRegister+0x6a>
	};

	return;
 8000942:	bf00      	nop
}
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Cbus_Write_Word_stream>:

void Cbus_Write_Word_stream(SPI_TypeDef *SPI_PORT, uint8_t Addr,
		uint16_t *pdata, uint16_t num_of_bytes_to_write) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	461a      	mov	r2, r3
 8000956:	460b      	mov	r3, r1
 8000958:	72fb      	strb	r3, [r7, #11]
 800095a:	4613      	mov	r3, r2
 800095c:	813b      	strh	r3, [r7, #8]

	uint8_t address = Addr;
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	753b      	strb	r3, [r7, #20]
	uint16_t i = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	82fb      	strh	r3, [r7, #22]
	uint16_t Data;
	bool iIrqDisabler;

	while (CBUS_BUSY(SPI_PORT))
 8000966:	bf00      	nop
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff fdc1 	bl	80004f0 <CBUS_BUSY>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f9      	bne.n	8000968 <Cbus_Write_Word_stream+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
		;
	__disable_irq();
	iIrqDisabler = true;
 8000978:	2301      	movs	r3, #1
 800097a:	757b      	strb	r3, [r7, #21]
	CBUS_SendFrame(SPI_PORT, address);
 800097c:	7d3b      	ldrb	r3, [r7, #20]
 800097e:	4619      	mov	r1, r3
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff fdeb 	bl	800055c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 8000986:	2300      	movs	r3, #0
 8000988:	82fb      	strh	r3, [r7, #22]
 800098a:	e036      	b.n	80009fa <Cbus_Write_Word_stream+0xb0>
		if (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT)) {
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff fdf5 	bl	800057c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10d      	bne.n	80009b4 <Cbus_Write_Word_stream+0x6a>
			if (iIrqDisabler != false) {
 8000998:	7d7b      	ldrb	r3, [r7, #21]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <Cbus_Write_Word_stream+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 800099e:	b662      	cpsie	i
}
 80009a0:	bf00      	nop
				__enable_irq();
				iIrqDisabler = false;
 80009a2:	2300      	movs	r3, #0
 80009a4:	757b      	strb	r3, [r7, #21]
			}
			while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80009a6:	bf00      	nop
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fde7 	bl	800057c <CBUS_TX_BUFFER_EMPTY_CHECK>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f9      	beq.n	80009a8 <Cbus_Write_Word_stream+0x5e>
		}

		Data = (pdata[i] >> 8);
 80009b4:	8afb      	ldrh	r3, [r7, #22]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	827b      	strh	r3, [r7, #18]
		CBUS_SendFrame(SPI_PORT, Data);
 80009c2:	8a7b      	ldrh	r3, [r7, #18]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fdc7 	bl	800055c <CBUS_SendFrame>
		Data = pdata[i];
 80009ce:	8afb      	ldrh	r3, [r7, #22]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	827b      	strh	r3, [r7, #18]
		while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80009da:	bf00      	nop
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fdcd 	bl	800057c <CBUS_TX_BUFFER_EMPTY_CHECK>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f9      	beq.n	80009dc <Cbus_Write_Word_stream+0x92>
		CBUS_SendFrame(SPI_PORT, Data);
 80009e8:	8a7b      	ldrh	r3, [r7, #18]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff fdb4 	bl	800055c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 80009f4:	8afb      	ldrh	r3, [r7, #22]
 80009f6:	3301      	adds	r3, #1
 80009f8:	82fb      	strh	r3, [r7, #22]
 80009fa:	8afa      	ldrh	r2, [r7, #22]
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3c4      	bcc.n	800098c <Cbus_Write_Word_stream+0x42>
	}
	if (iIrqDisabler != false) {
 8000a02:	7d7b      	ldrb	r3, [r7, #21]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <Cbus_Write_Word_stream+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a08:	b662      	cpsie	i
}
 8000a0a:	bf00      	nop
		__enable_irq();
	}

	return;
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop

}
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Cbus_Read_Word_stream>:

void Cbus_Read_Word_stream(SPI_TypeDef *SPI_PORT, uint8_t Addr, uint16_t *pdata,
		uint16_t num_of_bytes_to_read) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b08c      	sub	sp, #48	; 0x30
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	461a      	mov	r2, r3
 8000a22:	460b      	mov	r3, r1
 8000a24:	72fb      	strb	r3, [r7, #11]
 8000a26:	4613      	mov	r3, r2
 8000a28:	813b      	strh	r3, [r7, #8]
	int iOut;
	int iOcount;
	int iLsb;
	int iIn;

	address = Addr;
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	83fb      	strh	r3, [r7, #30]

	while (CBUS_BUSY(SPI_PORT))
 8000a2e:	bf00      	nop
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fd5d 	bl	80004f0 <CBUS_BUSY>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f9      	bne.n	8000a30 <Cbus_Read_Word_stream+0x1a>
		;
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) // check existing data and dump it
 8000a3c:	e004      	b.n	8000a48 <Cbus_Read_Word_stream+0x32>
	{

		received_data = CBUS_ReceiveFrame(SPI_PORT); // dumping junk data
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff fd7c 	bl	800053c <CBUS_ReceiveFrame>
 8000a44:	4603      	mov	r3, r0
 8000a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) // check existing data and dump it
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd64 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f4      	bne.n	8000a3e <Cbus_Read_Word_stream+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop

	}
	__disable_irq();
	iIRQ_Disabler = true;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	CBUS_SendFrame(SPI_PORT, address);
 8000a5e:	8bfb      	ldrh	r3, [r7, #30]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd79 	bl	800055c <CBUS_SendFrame>
	iOut = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	iOcount = num_of_bytes_to_read << 1; /* Twice as many bytes need sending */
 8000a6e:	893b      	ldrh	r3, [r7, #8]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
	iIn = -1;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	623b      	str	r3, [r7, #32]

	iLsb = 0; /* Not looking for the LSB */
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
	while (1) {
		if (iOut < iOcount) {
 8000a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	da1b      	bge.n	8000abe <Cbus_Read_Word_stream+0xa8>
			if (CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT)) // if tx buffer empty send frame
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fd78 	bl	800057c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00b      	beq.n	8000aaa <Cbus_Read_Word_stream+0x94>
					{

				CBUS_SendFrame(SPI_PORT, iOut + 1);
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f7ff fd5d 	bl	800055c <CBUS_SendFrame>
				iOut += 1;
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa8:	e012      	b.n	8000ad0 <Cbus_Read_Word_stream+0xba>

			}

			else {
				if (iIRQ_Disabler != false) {
 8000aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00e      	beq.n	8000ad0 <Cbus_Read_Word_stream+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ab2:	b662      	cpsie	i
}
 8000ab4:	bf00      	nop
					__enable_irq();
					iIRQ_Disabler = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000abc:	e008      	b.n	8000ad0 <Cbus_Read_Word_stream+0xba>
				}
			}
		}

		else {
			if (iIRQ_Disabler != false) {
 8000abe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d004      	beq.n	8000ad0 <Cbus_Read_Word_stream+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ac6:	b662      	cpsie	i
}
 8000ac8:	bf00      	nop
				__enable_irq();
				iIRQ_Disabler = false;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			}
		}
		if (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) // if not empty receive frames
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd20 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0d0      	beq.n	8000a7e <Cbus_Read_Word_stream+0x68>
				{
			wVal = CBUS_ReceiveFrame(SPI_PORT);
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff fd2d 	bl	800053c <CBUS_ReceiveFrame>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	82fb      	strh	r3, [r7, #22]
			if (iIn >= 0) /* Reading actual data */
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db1c      	blt.n	8000b26 <Cbus_Read_Word_stream+0x110>
			{
				if (iLsb == 0) {
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d105      	bne.n	8000afe <Cbus_Read_Word_stream+0xe8>
					received_data = wVal << 8;
 8000af2:	8afb      	ldrh	r3, [r7, #22]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
					iLsb = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
 8000afc:	e7bf      	b.n	8000a7e <Cbus_Read_Word_stream+0x68>
				} else {
					received_data |= wVal;
 8000afe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	85fb      	strh	r3, [r7, #46]	; 0x2e
					pdata[iIn] = received_data;
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b10:	801a      	strh	r2, [r3, #0]
					iIn += 1;
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	3301      	adds	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
					if (iIn >= num_of_bytes_to_read) {
 8000b18:	893b      	ldrh	r3, [r7, #8]
 8000b1a:	6a3a      	ldr	r2, [r7, #32]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	da06      	bge.n	8000b2e <Cbus_Read_Word_stream+0x118>
						break; /* We have all the data */
					}
					iLsb = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
 8000b24:	e7ab      	b.n	8000a7e <Cbus_Read_Word_stream+0x68>
				}
			} else {
				iIn += 1;
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
		if (iOut < iOcount) {
 8000b2c:	e7a7      	b.n	8000a7e <Cbus_Read_Word_stream+0x68>
						break; /* We have all the data */
 8000b2e:	bf00      	nop
			}
		}
	}

	return;
 8000b30:	bf00      	nop
}
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <CBUS_ENABLE>:

static inline void CBUS_ENABLE(SPI_TypeDef *SPI_PORT){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	SPI_PORT->CR1 |= SPI_CR1_SPE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */
	//uint16_t size_of_array = sizeof(array)/sizeof(array[0]);
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b5c:	f000 fc51 	bl	8001402 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b60:	f000 f8ec 	bl	8000d3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b64:	f000 f9e8 	bl	8000f38 <MX_GPIO_Init>
	CBUS_INIT();
 8000b68:	f7ff fe20 	bl	80007ac <CBUS_INIT>
	MX_LPUART1_UART_Init();
 8000b6c:	f000 f94a 	bl	8000e04 <MX_LPUART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000b70:	f000 f9b4 	bl	8000edc <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000b74:	f000 f974 	bl	8000e60 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */




	Cbus_Config(SPI3);
 8000b78:	486e      	ldr	r0, [pc, #440]	; (8000d34 <main+0x1dc>)
 8000b7a:	f7ff fe61 	bl	8000840 <Cbus_Config>
    CBUS_ENABLE(SPI3);
 8000b7e:	486d      	ldr	r0, [pc, #436]	; (8000d34 <main+0x1dc>)
 8000b80:	f7ff ffda 	bl	8000b38 <CBUS_ENABLE>
	CBUS_CHIP_SElECT_HIGH();
 8000b84:	f7ff fe2c 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000b88:	f7ff fe4a 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>

	// input codec setting start

	HAL_Delay(100);
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f000 fcad 	bl	80014ec <HAL_Delay>
	CBUS_CHIP_SElECT_LOW();
 8000b92:	f7ff fe15 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, MODE, 0x0210); //0024
 8000b96:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000b9a:	216b      	movs	r1, #107	; 0x6b
 8000b9c:	4865      	ldr	r0, [pc, #404]	; (8000d34 <main+0x1dc>)
 8000b9e:	f7ff fe95 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000ba2:	f7ff fe1d 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000ba6:	2032      	movs	r0, #50	; 0x32
 8000ba8:	f000 fca0 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000bac:	f7ff fe08 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Input_type, 0x0124); //0024
 8000bb0:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000bb4:	2154      	movs	r1, #84	; 0x54
 8000bb6:	485f      	ldr	r0, [pc, #380]	; (8000d34 <main+0x1dc>)
 8000bb8:	f7ff fe88 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000bbc:	f7ff fe10 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000bc0:	2032      	movs	r0, #50	; 0x32
 8000bc2:	f000 fc93 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000bc6:	f7ff fdfb 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Output_type, 0x0124); //0024
 8000bca:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000bce:	2156      	movs	r1, #86	; 0x56
 8000bd0:	4858      	ldr	r0, [pc, #352]	; (8000d34 <main+0x1dc>)
 8000bd2:	f7ff fe7b 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000bd6:	f7ff fe03 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000bda:	2032      	movs	r0, #50	; 0x32
 8000bdc:	f000 fc86 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000be0:	f7ff fdee 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, MODE, 0x0212); //0222
 8000be4:	f240 2212 	movw	r2, #530	; 0x212
 8000be8:	216b      	movs	r1, #107	; 0x6b
 8000bea:	4852      	ldr	r0, [pc, #328]	; (8000d34 <main+0x1dc>)
 8000bec:	f7ff fe6e 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000bf0:	f7ff fdf6 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f000 fc79 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000bfa:	f7ff fde1 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3,ANAIN_Coarse_GAIN, 0x0500); //0A66
 8000bfe:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c02:	21b1      	movs	r1, #177	; 0xb1
 8000c04:	484b      	ldr	r0, [pc, #300]	; (8000d34 <main+0x1dc>)
 8000c06:	f7ff fe61 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000c0a:	f7ff fde9 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000c0e:	2032      	movs	r0, #50	; 0x32
 8000c10:	f000 fc6c 	bl	80014ec <HAL_Delay>


	CBUS_CHIP_SElECT_LOW();
 8000c14:	f7ff fdd4 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, ANAIN_Config, 0x0A09); //0A66
 8000c18:	f640 2209 	movw	r2, #2569	; 0xa09
 8000c1c:	21b0      	movs	r1, #176	; 0xb0
 8000c1e:	4845      	ldr	r0, [pc, #276]	; (8000d34 <main+0x1dc>)
 8000c20:	f7ff fe54 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000c24:	f7ff fddc 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000c28:	2032      	movs	r0, #50	; 0x32
 8000c2a:	f000 fc5f 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000c2e:	f7ff fdc7 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3,Fine_Gain_Channel_1, 0x0080); //0A66
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	215b      	movs	r1, #91	; 0x5b
 8000c36:	483f      	ldr	r0, [pc, #252]	; (8000d34 <main+0x1dc>)
 8000c38:	f7ff fe48 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000c3c:	f7ff fdd0 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(50);
 8000c40:	2032      	movs	r0, #50	; 0x32
 8000c42:	f000 fc53 	bl	80014ec <HAL_Delay>
	//Cbus_Write_Word_stream(SPI3, Audio_in_fifo_data_data_word, pointtoarray,size_of_array);
	//CBUS_CHIP_SElECT_HIGH();
   // input codec setting end


	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000c46:	f7ff fddb 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,MODE,0x0120);
 8000c4a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000c4e:	216b      	movs	r1, #107	; 0x6b
 8000c50:	4838      	ldr	r0, [pc, #224]	; (8000d34 <main+0x1dc>)
 8000c52:	f7ff fe3b 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000c56:	f7ff fde3 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000c5a:	2032      	movs	r0, #50	; 0x32
 8000c5c:	f000 fc46 	bl	80014ec <HAL_Delay>



	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000c60:	f7ff fdce 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,Input_type,0x0124);
 8000c64:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000c68:	2154      	movs	r1, #84	; 0x54
 8000c6a:	4832      	ldr	r0, [pc, #200]	; (8000d34 <main+0x1dc>)
 8000c6c:	f7ff fe2e 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000c70:	f7ff fdd6 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000c74:	2032      	movs	r0, #50	; 0x32
 8000c76:	f000 fc39 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000c7a:	f7ff fdc1 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,Output_type,0x0124);
 8000c7e:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000c82:	2156      	movs	r1, #86	; 0x56
 8000c84:	482b      	ldr	r0, [pc, #172]	; (8000d34 <main+0x1dc>)
 8000c86:	f7ff fe21 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000c8a:	f7ff fdc9 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000c8e:	2032      	movs	r0, #50	; 0x32
 8000c90:	f000 fc2c 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000c94:	f7ff fdb4 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,MODE,0x0122);
 8000c98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8000c9c:	216b      	movs	r1, #107	; 0x6b
 8000c9e:	4825      	ldr	r0, [pc, #148]	; (8000d34 <main+0x1dc>)
 8000ca0:	f7ff fe14 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000ca4:	f7ff fdbc 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000ca8:	2032      	movs	r0, #50	; 0x32
 8000caa:	f000 fc1f 	bl	80014ec <HAL_Delay>


	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000cae:	f7ff fda7 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,ANAOUT_CONFIG,0x0A66);
 8000cb2:	f640 2266 	movw	r2, #2662	; 0xa66
 8000cb6:	21b3      	movs	r1, #179	; 0xb3
 8000cb8:	481e      	ldr	r0, [pc, #120]	; (8000d34 <main+0x1dc>)
 8000cba:	f7ff fe07 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000cbe:	f7ff fdaf 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000cc2:	2032      	movs	r0, #50	; 0x32
 8000cc4:	f000 fc12 	bl	80014ec <HAL_Delay>


	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000cc8:	f7ff fd9a 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,SPKR_COARSE_GAIN,0x8000);
 8000ccc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cd0:	21b6      	movs	r1, #182	; 0xb6
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <main+0x1dc>)
 8000cd4:	f7ff fdfa 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000cd8:	f7ff fda2 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000cdc:	2032      	movs	r0, #50	; 0x32
 8000cde:	f000 fc05 	bl	80014ec <HAL_Delay>

	CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000ce2:	f7ff fd8d 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
	CbusWriteRegister(SPI3,Fine_Gain_Channel_1, 0x0090);
 8000ce6:	2290      	movs	r2, #144	; 0x90
 8000ce8:	215b      	movs	r1, #91	; 0x5b
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <main+0x1dc>)
 8000cec:	f7ff fdee 	bl	80008cc <CbusWriteRegister>
	CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000cf0:	f7ff fd96 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
	HAL_Delay(50);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f000 fbf9 	bl	80014ec <HAL_Delay>



while (1)
  { HAL_Delay(25);
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fbf6 	bl	80014ec <HAL_Delay>
    CBUS_CHIP_SElECT_LOW();
 8000d00:	f7ff fd5e 	bl	80007c0 <CBUS_CHIP_SElECT_LOW>
    Cbus_Read_Word_stream(SPI3,Audio_out_fifo_data_word,array,512);
 8000d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <main+0x1e0>)
 8000d0a:	214d      	movs	r1, #77	; 0x4d
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <main+0x1dc>)
 8000d0e:	f7ff fe82 	bl	8000a16 <Cbus_Read_Word_stream>
    CBUS_CHIP_SElECT_HIGH();
 8000d12:	f7ff fd65 	bl	80007e0 <CBUS_CHIP_SElECT_HIGH>

    HAL_Delay(20);
 8000d16:	2014      	movs	r0, #20
 8000d18:	f000 fbe8 	bl	80014ec <HAL_Delay>

   CBUS_CHIP_SElECT_OUPUT_CODEC_LOW();
 8000d1c:	f7ff fd70 	bl	8000800 <CBUS_CHIP_SElECT_OUPUT_CODEC_LOW>
    Cbus_Write_Word_stream(SPI3,Audio_in_fifo_data_word,array,512);
 8000d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <main+0x1e0>)
 8000d26:	2149      	movs	r1, #73	; 0x49
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <main+0x1dc>)
 8000d2a:	f7ff fe0e 	bl	800094a <Cbus_Write_Word_stream>
    CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000d2e:	f7ff fd77 	bl	8000820 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>
  { HAL_Delay(25);
 8000d32:	e7e2      	b.n	8000cfa <main+0x1a2>
 8000d34:	40003c00 	.word	0x40003c00
 8000d38:	2000061c 	.word	0x2000061c

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b096      	sub	sp, #88	; 0x58
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2244      	movs	r2, #68	; 0x44
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fba8 	bl	80044a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d62:	f000 ffdd 	bl	8001d20 <HAL_PWREx_ControlVoltageScaling>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d6c:	f000 f97c 	bl	8001068 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d70:	f000 ffb8 	bl	8001ce4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <SystemClock_Config+0xc4>)
 8000d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d7a:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <SystemClock_Config+0xc4>)
 8000d7c:	f023 0318 	bic.w	r3, r3, #24
 8000d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d84:	2314      	movs	r3, #20
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000da4:	2328      	movs	r3, #40	; 0x28
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f827 	bl	8001e0c <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 f950 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	2104      	movs	r1, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fc2b 	bl	8002640 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000df0:	f000 f93a 	bl	8001068 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000df4:	f002 f944 	bl	8003080 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000df8:	bf00      	nop
 8000dfa:	3758      	adds	r7, #88	; 0x58
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_LPUART1_UART_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_LPUART1_UART_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_LPUART1_UART_Init+0x50>)
 8000e42:	f002 fb9e 	bl	8003582 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f90c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000028 	.word	0x20000028
 8000e58:	40008000 	.word	0x40008000
 8000e5c:	00033324 	.word	0x00033324

08000e60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MX_SPI1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000eae:	2207      	movs	r2, #7
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_SPI1_Init+0x74>)
 8000ec0:	f002 fabc 	bl	800343c <HAL_SPI_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 f8cd 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000ac 	.word	0x200000ac
 8000ed8:	40013000 	.word	0x40013000

08000edc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2206      	movs	r2, #6
 8000eec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	f000 fd98 	bl	8001a54 <HAL_PCD_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f89d 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000110 	.word	0x20000110

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a41      	ldr	r2, [pc, #260]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <MX_GPIO_Init+0x120>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_GPIO_Init+0x120>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_GPIO_Init+0x120>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <MX_GPIO_Init+0x120>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_GPIO_Init+0x120>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000fc6:	f000 ff11 	bl	8001dec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_GPIO_Init+0x124>)
 8000fd2:	f000 fd27 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	4821      	ldr	r0, [pc, #132]	; (8001060 <MX_GPIO_Init+0x128>)
 8000fdc:	f000 fd22 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <MX_GPIO_Init+0x12c>)
 8000ff8:	f000 fb82 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ffc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_GPIO_Init+0x124>)
 8001016:	f000 fb73 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800101a:	2320      	movs	r3, #32
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_GPIO_Init+0x128>)
 800102e:	f000 fb67 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_GPIO_Init+0x128>)
 800104a:	f000 fb59 	bl	8001700 <HAL_GPIO_Init>

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400
 8001060:	48001800 	.word	0x48001800
 8001064:	48000800 	.word	0x48000800

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ac      	sub	sp, #176	; 0xb0
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	228c      	movs	r2, #140	; 0x8c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 f9df 	bl	80044a0 <memset>
  if(huart->Instance==LPUART1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <HAL_UART_MspInit+0xb4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d13d      	bne.n	8001168 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010ec:	2320      	movs	r3, #32
 80010ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fcc5 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001104:	f7ff ffb0 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_UART_MspInit+0xb8>)
 800110a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_UART_MspInit+0xb8>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_MspInit+0xb8>)
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0xb8>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_UART_MspInit+0xb8>)
 8001126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_MspInit+0xb8>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001138:	f000 fe58 	bl	8001dec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800113c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001156:	2308      	movs	r3, #8
 8001158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_UART_MspInit+0xbc>)
 8001164:	f000 facc 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	37b0      	adds	r7, #176	; 0xb0
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40008000 	.word	0x40008000
 8001174:	40021000 	.word	0x40021000
 8001178:	48001800 	.word	0x48001800

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_SPI_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a8:	6613      	str	r3, [r2, #96]	; 0x60
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_SPI_MspInit+0x80>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23c2      	movs	r3, #194	; 0xc2
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011de:	2305      	movs	r3, #5
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 fa88 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ae      	sub	sp, #184	; 0xb8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	228c      	movs	r2, #140	; 0x8c
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f93d 	bl	80044a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122e:	d17c      	bne.n	800132a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800123a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001246:	2318      	movs	r3, #24
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fc11 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800126c:	f7ff fefc 	bl	8001068 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_PCD_MspInit+0x134>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_PCD_MspInit+0x134>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_PCD_MspInit+0x134>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001288:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800128c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012a2:	230a      	movs	r3, #10
 80012a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f000 fa25 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fa14 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_PCD_MspInit+0x134>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a15      	ldr	r2, [pc, #84]	; (8001334 <HAL_PCD_MspInit+0x134>)
 80012de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_PCD_MspInit+0x134>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_PCD_MspInit+0x134>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d114      	bne.n	8001326 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_PCD_MspInit+0x134>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_PCD_MspInit+0x134>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6593      	str	r3, [r2, #88]	; 0x58
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_PCD_MspInit+0x134>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001314:	f000 fd5a 	bl	8001dcc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_PCD_MspInit+0x134>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_PCD_MspInit+0x134>)
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001324:	e001      	b.n	800132a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001326:	f000 fd51 	bl	8001dcc <HAL_PWREx_EnableVddUSB>
}
 800132a:	bf00      	nop
 800132c:	37b8      	adds	r7, #184	; 0xb8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f892 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b4:	f7ff ffea 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f003 f83b 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff fbb9 	bl	8000b58 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f4:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 80013f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013fc:	20000a20 	.word	0x20000a20

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>

08001402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f943 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f80e 	bl	8001434 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e001      	b.n	8001428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001424:	f7ff fe26 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001428:	79fb      	ldrb	r3, [r7, #7]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_InitTick+0x70>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_InitTick+0x6c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f941 	bl	80016e6 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d809      	bhi.n	8001484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f919 	bl	80016ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_InitTick+0x74>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e007      	b.n	8001494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e004      	b.n	8001494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e001      	b.n	8001494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000a1c 	.word	0x20000a1c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000a1c 	.word	0x20000a1c

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff47 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff5c 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffb0 	bl	8001654 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e166      	b.n	80019de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8158 	beq.w	80019d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <HAL_GPIO_Init+0x40>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d017      	beq.n	80017de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d123      	bne.n	8001832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	6939      	ldr	r1, [r7, #16]
 800182e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0203 	and.w	r2, r3, #3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80b2 	beq.w	80019d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6613      	str	r3, [r2, #96]	; 0x60
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188c:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_GPIO_Init+0x300>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b6:	d02b      	beq.n	8001910 <HAL_GPIO_Init+0x210>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d025      	beq.n	800190c <HAL_GPIO_Init+0x20c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <HAL_GPIO_Init+0x308>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01f      	beq.n	8001908 <HAL_GPIO_Init+0x208>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <HAL_GPIO_Init+0x30c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_GPIO_Init+0x204>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4f      	ldr	r2, [pc, #316]	; (8001a10 <HAL_GPIO_Init+0x310>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_GPIO_Init+0x200>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_GPIO_Init+0x314>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_GPIO_Init+0x1fc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4d      	ldr	r2, [pc, #308]	; (8001a18 <HAL_GPIO_Init+0x318>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1f8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4c      	ldr	r2, [pc, #304]	; (8001a1c <HAL_GPIO_Init+0x31c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_GPIO_Init+0x1f4>
 80018f0:	2307      	movs	r3, #7
 80018f2:	e00e      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018f4:	2308      	movs	r3, #8
 80018f6:	e00c      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018f8:	2306      	movs	r3, #6
 80018fa:	e00a      	b.n	8001912 <HAL_GPIO_Init+0x212>
 80018fc:	2305      	movs	r3, #5
 80018fe:	e008      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001900:	2304      	movs	r3, #4
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001904:	2303      	movs	r3, #3
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x212>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x212>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x300>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_GPIO_Init+0x320>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800197e:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_GPIO_Init+0x320>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_GPIO_Init+0x320>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae91 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	48001000 	.word	0x48001000
 8001a14:	48001400 	.word	0x48001400
 8001a18:	48001800 	.word	0x48001800
 8001a1c:	48001c00 	.word	0x48001c00
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b08f      	sub	sp, #60	; 0x3c
 8001a58:	af0a      	add	r7, sp, #40	; 0x28
 8001a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e116      	b.n	8001c94 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d106      	bne.n	8001a86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fbbd 	bl	8001200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fa4e 	bl	8003f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	687e      	ldr	r6, [r7, #4]
 8001ab2:	466d      	mov	r5, sp
 8001ab4:	f106 0410 	add.w	r4, r6, #16
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac8:	1d33      	adds	r3, r6, #4
 8001aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f002 fa0e 	bl	8003eee <USB_CoreInit>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d7      	b.n	8001c94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fa3c 	bl	8003f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e04a      	b.n	8001b8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	333d      	adds	r3, #61	; 0x3d
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	333c      	adds	r3, #60	; 0x3c
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	b298      	uxth	r0, r3
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3344      	adds	r3, #68	; 0x44
 8001b32:	4602      	mov	r2, r0
 8001b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3340      	adds	r3, #64	; 0x40
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	3348      	adds	r3, #72	; 0x48
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	334c      	adds	r3, #76	; 0x4c
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	3354      	adds	r3, #84	; 0x54
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3af      	bcc.n	8001af6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e044      	b.n	8001c26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	3301      	adds	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3b5      	bcc.n	8001b9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	687e      	ldr	r6, [r7, #4]
 8001c38:	466d      	mov	r5, sp
 8001c3a:	f106 0410 	add.w	r4, r6, #16
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c4e:	1d33      	adds	r3, r6, #4
 8001c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f002 f9d4 	bl	8004000 <USB_DevInit>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e014      	b.n	8001c94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f80a 	bl	8001c9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fb80 	bl	8004392 <USB_DevDisconnect>

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	f043 0303 	orr.w	r3, r3, #3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2e:	d130      	bne.n	8001d92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d038      	beq.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2232      	movs	r2, #50	; 0x32
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9b      	lsrs	r3, r3, #18
 8001d60:	3301      	adds	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d64:	e002      	b.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d78:	d102      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f2      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8c:	d110      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00f      	b.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9e:	d007      	beq.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	431bde83 	.word	0x431bde83

08001dcc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dda:	6053      	str	r3, [r2, #4]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000

08001dec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6053      	str	r3, [r2, #4]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f000 bc08 	b.w	8002630 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e20:	4b96      	ldr	r3, [pc, #600]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2a:	4b94      	ldr	r3, [pc, #592]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80e4 	beq.w	800200a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4c>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	f040 808b 	bne.w	8001f66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 8087 	bne.w	8001f66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e58:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x64>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e3df      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	4b81      	ldr	r3, [pc, #516]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_RCC_OscConfig+0x7e>
 8001e80:	4b7e      	ldr	r3, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	e005      	b.n	8001e96 <HAL_RCC_OscConfig+0x8a>
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d223      	bcs.n	8001ee2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fd92 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e3c0      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eae:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a72      	ldr	r2, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b70      	ldr	r3, [pc, #448]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	496d      	ldr	r1, [pc, #436]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	4968      	ldr	r1, [pc, #416]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e025      	b.n	8001f2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee2:	4b66      	ldr	r3, [pc, #408]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a65      	ldr	r2, [pc, #404]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4960      	ldr	r1, [pc, #384]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	495b      	ldr	r1, [pc, #364]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd52 	bl	80029c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e380      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f2e:	f000 fc87 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b51      	ldr	r3, [pc, #324]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	4950      	ldr	r1, [pc, #320]	; (8002080 <HAL_RCC_OscConfig+0x274>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_RCC_OscConfig+0x278>)
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa6e 	bl	8001434 <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d052      	beq.n	8002008 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	e364      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d032      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a42      	ldr	r2, [pc, #264]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff faab 	bl	80014d4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f82:	f7ff faa7 	bl	80014d4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e34d      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a35      	ldr	r2, [pc, #212]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4930      	ldr	r1, [pc, #192]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	492b      	ldr	r1, [pc, #172]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
 8001fd2:	e01a      	b.n	800200a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fa78 	bl	80014d4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fa74 	bl	80014d4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e31a      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1dc>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d073      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x21c>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d10e      	bne.n	8002040 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d063      	beq.n	80020fc <HAL_RCC_OscConfig+0x2f0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d15f      	bne.n	80020fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e2f7      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x24c>
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e025      	b.n	80020a4 <HAL_RCC_OscConfig+0x298>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d114      	bne.n	800208c <HAL_RCC_OscConfig+0x280>
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a02      	ldr	r2, [pc, #8]	; (800207c <HAL_RCC_OscConfig+0x270>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x298>
 800207c:	40021000 	.word	0x40021000
 8002080:	080044c8 	.word	0x080044c8
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004
 800208c:	4ba0      	ldr	r3, [pc, #640]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a9f      	ldr	r2, [pc, #636]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b9d      	ldr	r3, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a9c      	ldr	r2, [pc, #624]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa12 	bl	80014d4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fa0e 	bl	80014d4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2b4      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2a8>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff f9fe 	bl	80014d4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f9fa 	bl	80014d4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2a0      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x2d0>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d060      	beq.n	80021cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x310>
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d119      	bne.n	800214a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d116      	bne.n	800214a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800211c:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_OscConfig+0x328>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e27d      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	4973      	ldr	r1, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002148:	e040      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002152:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f9b9 	bl	80014d4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7ff f9b5 	bl	80014d4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e25b      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002178:	4b65      	ldr	r3, [pc, #404]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b62      	ldr	r3, [pc, #392]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	495f      	ldr	r1, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e018      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80021a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff f995 	bl	80014d4 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff f991 	bl	80014d4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e237      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03c      	beq.n	8002252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f970 	bl	80014d4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7ff f96c 	bl	80014d4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e212      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800220c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCC_OscConfig+0x3ec>
 8002218:	e01b      	b.n	8002252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f953 	bl	80014d4 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f94f 	bl	80014d4 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1f5      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ef      	bne.n	8002232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80a6 	beq.w	80023ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x508>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_OscConfig+0x508>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x508>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f916 	bl	80014d4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7ff f912 	bl	80014d4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1b8      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_RCC_OscConfig+0x508>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d8>
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e2:	e029      	b.n	8002338 <HAL_RCC_OscConfig+0x52c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d115      	bne.n	8002318 <HAL_RCC_OscConfig+0x50c>
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <HAL_RCC_OscConfig+0x504>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x52c>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	4a9c      	ldr	r2, [pc, #624]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	4a98      	ldr	r2, [pc, #608]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d016      	beq.n	800236e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff f8c8 	bl	80014d4 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff f8c4 	bl	80014d4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e168      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235e:	4b8c      	ldr	r3, [pc, #560]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ed      	beq.n	8002348 <HAL_RCC_OscConfig+0x53c>
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7ff f8b1 	bl	80014d4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff f8ad 	bl	80014d4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e151      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238c:	4b80      	ldr	r3, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ed      	bne.n	8002376 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a7a      	ldr	r2, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03c      	beq.n	8002432 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01c      	beq.n	80023fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023c6:	4a72      	ldr	r2, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff f880 	bl	80014d4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d8:	f7ff f87c 	bl	80014d4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e122      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ea:	4b69      	ldr	r3, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ef      	beq.n	80023d8 <HAL_RCC_OscConfig+0x5cc>
 80023f8:	e01b      	b.n	8002432 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80023fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002400:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7ff f863 	bl	80014d4 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002412:	f7ff f85f 	bl	80014d4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e105      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002424:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ef      	bne.n	8002412 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80f9 	beq.w	800262e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	2b02      	cmp	r3, #2
 8002442:	f040 80cf 	bne.w	80025e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002446:	4b52      	ldr	r3, [pc, #328]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	429a      	cmp	r2, r3
 8002458:	d12c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	3b01      	subs	r3, #1
 8002466:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d123      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d11b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d113      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	3b01      	subs	r3, #1
 80024ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d071      	beq.n	8002598 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d068      	beq.n	800258c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0ac      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2d      	ldr	r2, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e2:	f7fe fff7 	bl	80014d4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fff3 	bl	80014d4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e099      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCC_OscConfig+0x788>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002518:	3a01      	subs	r2, #1
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002522:	0212      	lsls	r2, r2, #8
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0552      	lsls	r2, r2, #21
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002536:	0852      	lsrs	r2, r2, #1
 8002538:	3a01      	subs	r2, #1
 800253a:	0652      	lsls	r2, r2, #25
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002542:	06d2      	lsls	r2, r2, #27
 8002544:	430a      	orrs	r2, r1
 8002546:	4912      	ldr	r1, [pc, #72]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe ffb6 	bl	80014d4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe ffb2 	bl	80014d4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e058      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_RCC_OscConfig+0x784>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258a:	e050      	b.n	800262e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04f      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
 8002590:	40021000 	.word	0x40021000
 8002594:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d144      	bne.n	800262e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025bc:	f7fe ff8a 	bl	80014d4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe ff86 	bl	80014d4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e02c      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x7b8>
 80025e2:	e024      	b.n	800262e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d01f      	beq.n	800262a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 80025f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe ff6d 	bl	80014d4 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe ff69 	bl	80014d4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4905      	ldr	r1, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x82c>)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x830>)
 8002624:	4013      	ands	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
 8002628:	e001      	b.n	800262e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	feeefffc 	.word	0xfeeefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0e7      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b75      	ldr	r3, [pc, #468]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b6e      	ldr	r3, [pc, #440]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cf      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4960      	ldr	r1, [pc, #384]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04c      	beq.n	8002758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0a6      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f6:	4b4e      	ldr	r3, [pc, #312]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e086      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fed4 	bl	80014d4 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fed0 	bl	80014d4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e06e      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d208      	bcs.n	8002786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	492b      	ldr	r1, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d210      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	4923      	ldr	r1, [pc, #140]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e036      	b.n	8002824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4918      	ldr	r1, [pc, #96]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f4:	f000 f824 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1f4>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1fc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fe0b 	bl	8001434 <HAL_InitTick>
 800281e:	4603      	mov	r3, r0
 8002820:	72fb      	strb	r3, [r7, #11]

  return status;
 8002822:	7afb      	ldrb	r3, [r7, #11]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	080044c8 	.word	0x080044c8
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d11e      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_RCC_GetSysClockFreq+0x10c>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d134      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d003      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0xac>
 80028e4:	e005      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e8:	617b      	str	r3, [r7, #20]
      break;
 80028ea:	e005      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ee:	617b      	str	r3, [r7, #20]
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	617b      	str	r3, [r7, #20]
      break;
 80028f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	3301      	adds	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_GetSysClockFreq+0x108>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	0e5b      	lsrs	r3, r3, #25
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	3301      	adds	r3, #1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002938:	69bb      	ldr	r3, [r7, #24]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	080044e0 	.word	0x080044e0
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	080044d8 	.word	0x080044d8

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff ffda 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080044d8 	.word	0x080044d8

080029c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029e0:	f7ff f990 	bl	8001d04 <HAL_PWREx_GetVoltageRange>
 80029e4:	6178      	str	r0, [r7, #20]
 80029e6:	e014      	b.n	8002a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f980 	bl	8001d04 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d10b      	bne.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d919      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2ba0      	cmp	r3, #160	; 0xa0
 8002a24:	d902      	bls.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a26:	2302      	movs	r3, #2
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e013      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e010      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d902      	bls.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a38:	2303      	movs	r3, #3
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e00a      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d102      	bne.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a44:	2302      	movs	r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e004      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d101      	bne.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a50:	2301      	movs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4909      	ldr	r1, [pc, #36]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a94:	2300      	movs	r3, #0
 8002a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d041      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aac:	d02a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ab2:	d824      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002abe:	d81e      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac8:	d010      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aca:	e018      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a85      	ldr	r2, [pc, #532]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e015      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fadd 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aea:	e00c      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3320      	adds	r3, #32
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fbc6 	bl	8003284 <RCCEx_PLLSAI2_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	74fb      	strb	r3, [r7, #19]
      break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0c:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b1a:	4973      	ldr	r1, [pc, #460]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d041      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b3c:	d02a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b42:	d824      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b4e:	d81e      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b58:	d010      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5a:	e018      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b68:	e015      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fa95 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb7e 	bl	8003284 <RCCEx_PLLSAI2_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	74fb      	strb	r3, [r7, #19]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9c:	4b52      	ldr	r3, [pc, #328]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	494f      	ldr	r1, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a0 	beq.w	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58
 8002bec:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fc64 	bl	80014d4 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe fc60 	bl	80014d4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	74fb      	strb	r3, [r7, #19]
        break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d15c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d019      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fc1f 	bl	80014d4 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fc1b 	bl	80014d4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d902      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ec      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cde:	e009      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
 8002ce4:	e006      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4ba6      	ldr	r3, [pc, #664]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4aa5      	ldr	r2, [pc, #660]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d12:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	499c      	ldr	r1, [pc, #624]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d34:	4b97      	ldr	r3, [pc, #604]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 020c 	bic.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d56:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	498b      	ldr	r1, [pc, #556]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4983      	ldr	r1, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d9a:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	497a      	ldr	r1, [pc, #488]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4972      	ldr	r1, [pc, #456]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	4969      	ldr	r1, [pc, #420]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0e:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	4958      	ldr	r1, [pc, #352]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	4947      	ldr	r1, [pc, #284]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e88:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d028      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4936      	ldr	r1, [pc, #216]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec8:	d106      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed4:	60d3      	str	r3, [r2, #12]
 8002ed6:	e011      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f8d9 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d028      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	491f      	ldr	r1, [pc, #124]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]
 8002f34:	e011      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f8aa 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	4907      	ldr	r1, [pc, #28]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d108      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f86:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f90:	60d3      	str	r3, [r2, #12]
 8002f92:	e013      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002f94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f879 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02f      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd6:	4929      	ldr	r1, [pc, #164]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f856 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3320      	adds	r3, #32
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f935 	bl	8003284 <RCCEx_PLLSAI2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003044:	490d      	ldr	r1, [pc, #52]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003070:	7cbb      	ldrb	r3, [r7, #18]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000

080030a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ae:	4b74      	ldr	r3, [pc, #464]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ba:	4b71      	ldr	r3, [pc, #452]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10d      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
       ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030d2:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
       ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d047      	beq.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e044      	b.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d018      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x86>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d825      	bhi.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d002      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x62>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d009      	beq.n	8003114 <RCCEx_PLLSAI1_Config+0x74>
 8003100:	e020      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003102:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e01a      	b.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003114:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e013      	b.n	800314e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003142:	e006      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e004      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003152:	bf00      	nop
    }

    if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	430b      	orrs	r3, r1
 8003170:	4943      	ldr	r1, [pc, #268]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d17c      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800317c:	4b40      	ldr	r3, [pc, #256]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3f      	ldr	r2, [pc, #252]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fe f9a4 	bl	80014d4 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fe f9a0 	bl	80014d4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ef      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d15f      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d110      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	0211      	lsls	r1, r2, #8
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	06d2      	lsls	r2, r2, #27
 80031d4:	430a      	orrs	r2, r1
 80031d6:	492a      	ldr	r1, [pc, #168]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	610b      	str	r3, [r1, #16]
 80031dc:	e027      	b.n	800322e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d112      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	0211      	lsls	r1, r2, #8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0552      	lsls	r2, r2, #21
 8003200:	430a      	orrs	r2, r1
 8003202:	491f      	ldr	r1, [pc, #124]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	610b      	str	r3, [r1, #16]
 8003208:	e011      	b.n	800322e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	0211      	lsls	r1, r2, #8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6952      	ldr	r2, [r2, #20]
 8003220:	0852      	lsrs	r2, r2, #1
 8003222:	3a01      	subs	r2, #1
 8003224:	0652      	lsls	r2, r2, #25
 8003226:	430a      	orrs	r2, r1
 8003228:	4915      	ldr	r1, [pc, #84]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003238:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe f94b 	bl	80014d4 <HAL_GetTick>
 800323e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003240:	e009      	b.n	8003256 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003242:	f7fe f947 	bl	80014d4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	73fb      	strb	r3, [r7, #15]
          break;
 8003254:	e005      	b.n	8003262 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b69      	ldr	r3, [pc, #420]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800329e:	4b66      	ldr	r3, [pc, #408]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032b6:	4b60      	ldr	r3, [pc, #384]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d047      	beq.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e044      	b.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI2_Config+0x86>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI2_Config+0xa4>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0x62>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI2_Config+0x74>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b48      	ldr	r3, [pc, #288]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	430b      	orrs	r3, r1
 8003354:	4938      	ldr	r1, [pc, #224]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d166      	bne.n	800342e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a34      	ldr	r2, [pc, #208]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fe f8b2 	bl	80014d4 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003374:	f7fe f8ae 	bl	80014d4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d149      	bne.n	800342e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d110      	bne.n	80033c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a0:	4b25      	ldr	r3, [pc, #148]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80033a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	06d2      	lsls	r2, r2, #27
 80033b8:	430a      	orrs	r2, r1
 80033ba:	491f      	ldr	r1, [pc, #124]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	614b      	str	r3, [r1, #20]
 80033c0:	e011      	b.n	80033e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	0211      	lsls	r1, r2, #8
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6912      	ldr	r2, [r2, #16]
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	3a01      	subs	r2, #1
 80033dc:	0652      	lsls	r2, r2, #25
 80033de:	430a      	orrs	r2, r1
 80033e0:	4915      	ldr	r1, [pc, #84]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe f86f 	bl	80014d4 <HAL_GetTick>
 80033f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f8:	e009      	b.n	800340e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033fa:	f7fe f86b 	bl	80014d4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d902      	bls.n	800340e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	73fb      	strb	r3, [r7, #15]
          break;
 800340c:	e005      	b.n	800341a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ef      	beq.n	80033fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <RCCEx_PLLSAI2_Config+0x1b4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e095      	b.n	800357a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800345e:	d009      	beq.n	8003474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e005      	b.n	8003474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fe74 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b4:	d902      	bls.n	80034bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e002      	b.n	80034c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Init+0xa0>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	ea42 0103 	orr.w	r1, r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	f003 0204 	and.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003558:	ea42 0103 	orr.w	r1, r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e040      	b.n	8003616 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fd89 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f82d 	bl	8003620 <UART_SetConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e022      	b.n	8003616 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fad9 	bl	8003b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fb60 	bl	8003cd4 <UART_CheckIdleState>
 8003614:	4603      	mov	r3, r0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	431a      	orrs	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4313      	orrs	r3, r2
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4ba4      	ldr	r3, [pc, #656]	; (80038e0 <UART_SetConfig+0x2c0>)
 8003650:	4013      	ands	r3, r2
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003658:	430b      	orrs	r3, r1
 800365a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a99      	ldr	r2, [pc, #612]	; (80038e4 <UART_SetConfig+0x2c4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	4313      	orrs	r3, r2
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a90      	ldr	r2, [pc, #576]	; (80038e8 <UART_SetConfig+0x2c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d126      	bne.n	80036f8 <UART_SetConfig+0xd8>
 80036aa:	4b90      	ldr	r3, [pc, #576]	; (80038ec <UART_SetConfig+0x2cc>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0xd0>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0xa0>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e1 	.word	0x080036e1
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e9 	.word	0x080036e9
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e116      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e112      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e10e      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e10a      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e106      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a7c      	ldr	r2, [pc, #496]	; (80038f0 <UART_SetConfig+0x2d0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d138      	bne.n	8003774 <UART_SetConfig+0x154>
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <UART_SetConfig+0x2cc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d82d      	bhi.n	800376c <UART_SetConfig+0x14c>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <UART_SetConfig+0xf8>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800374d 	.word	0x0800374d
 800371c:	0800376d 	.word	0x0800376d
 8003720:	0800376d 	.word	0x0800376d
 8003724:	0800376d 	.word	0x0800376d
 8003728:	0800375d 	.word	0x0800375d
 800372c:	0800376d 	.word	0x0800376d
 8003730:	0800376d 	.word	0x0800376d
 8003734:	0800376d 	.word	0x0800376d
 8003738:	08003755 	.word	0x08003755
 800373c:	0800376d 	.word	0x0800376d
 8003740:	0800376d 	.word	0x0800376d
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003765 	.word	0x08003765
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e0d8      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003754:	2302      	movs	r3, #2
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e0d4      	b.n	8003906 <UART_SetConfig+0x2e6>
 800375c:	2304      	movs	r3, #4
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e0d0      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003764:	2308      	movs	r3, #8
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e0cc      	b.n	8003906 <UART_SetConfig+0x2e6>
 800376c:	2310      	movs	r3, #16
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e0c8      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5e      	ldr	r2, [pc, #376]	; (80038f4 <UART_SetConfig+0x2d4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d125      	bne.n	80037ca <UART_SetConfig+0x1aa>
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <UART_SetConfig+0x2cc>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d016      	beq.n	80037ba <UART_SetConfig+0x19a>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d818      	bhi.n	80037c2 <UART_SetConfig+0x1a2>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d00a      	beq.n	80037aa <UART_SetConfig+0x18a>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d814      	bhi.n	80037c2 <UART_SetConfig+0x1a2>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <UART_SetConfig+0x182>
 800379c:	2b10      	cmp	r3, #16
 800379e:	d008      	beq.n	80037b2 <UART_SetConfig+0x192>
 80037a0:	e00f      	b.n	80037c2 <UART_SetConfig+0x1a2>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a8:	e0ad      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037aa:	2302      	movs	r3, #2
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b0:	e0a9      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037b2:	2304      	movs	r3, #4
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b8:	e0a5      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037ba:	2308      	movs	r3, #8
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c0:	e0a1      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037c2:	2310      	movs	r3, #16
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c8:	e09d      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <UART_SetConfig+0x2d8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d125      	bne.n	8003820 <UART_SetConfig+0x200>
 80037d4:	4b45      	ldr	r3, [pc, #276]	; (80038ec <UART_SetConfig+0x2cc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037de:	2bc0      	cmp	r3, #192	; 0xc0
 80037e0:	d016      	beq.n	8003810 <UART_SetConfig+0x1f0>
 80037e2:	2bc0      	cmp	r3, #192	; 0xc0
 80037e4:	d818      	bhi.n	8003818 <UART_SetConfig+0x1f8>
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d00a      	beq.n	8003800 <UART_SetConfig+0x1e0>
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d814      	bhi.n	8003818 <UART_SetConfig+0x1f8>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <UART_SetConfig+0x1d8>
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d008      	beq.n	8003808 <UART_SetConfig+0x1e8>
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x1f8>
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e082      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003800:	2302      	movs	r3, #2
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e07e      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003808:	2304      	movs	r3, #4
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e07a      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003810:	2308      	movs	r3, #8
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e076      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003818:	2310      	movs	r3, #16
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e072      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a35      	ldr	r2, [pc, #212]	; (80038fc <UART_SetConfig+0x2dc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d12a      	bne.n	8003880 <UART_SetConfig+0x260>
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <UART_SetConfig+0x2cc>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003838:	d01a      	beq.n	8003870 <UART_SetConfig+0x250>
 800383a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383e:	d81b      	bhi.n	8003878 <UART_SetConfig+0x258>
 8003840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003844:	d00c      	beq.n	8003860 <UART_SetConfig+0x240>
 8003846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384a:	d815      	bhi.n	8003878 <UART_SetConfig+0x258>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <UART_SetConfig+0x238>
 8003850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003854:	d008      	beq.n	8003868 <UART_SetConfig+0x248>
 8003856:	e00f      	b.n	8003878 <UART_SetConfig+0x258>
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e052      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e04e      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003868:	2304      	movs	r3, #4
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e04a      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e046      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e042      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <UART_SetConfig+0x2c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d13a      	bne.n	8003900 <UART_SetConfig+0x2e0>
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <UART_SetConfig+0x2cc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003898:	d01a      	beq.n	80038d0 <UART_SetConfig+0x2b0>
 800389a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800389e:	d81b      	bhi.n	80038d8 <UART_SetConfig+0x2b8>
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a4:	d00c      	beq.n	80038c0 <UART_SetConfig+0x2a0>
 80038a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038aa:	d815      	bhi.n	80038d8 <UART_SetConfig+0x2b8>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <UART_SetConfig+0x298>
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d008      	beq.n	80038c8 <UART_SetConfig+0x2a8>
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x2b8>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e022      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038c0:	2302      	movs	r3, #2
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e01e      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038c8:	2304      	movs	r3, #4
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e01a      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038d0:	2308      	movs	r3, #8
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e016      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038d8:	2310      	movs	r3, #16
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e012      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038e0:	efff69f3 	.word	0xefff69f3
 80038e4:	40008000 	.word	0x40008000
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40004400 	.word	0x40004400
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40004c00 	.word	0x40004c00
 80038fc:	40005000 	.word	0x40005000
 8003900:	2310      	movs	r3, #16
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a9f      	ldr	r2, [pc, #636]	; (8003b88 <UART_SetConfig+0x568>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d17a      	bne.n	8003a06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003914:	2b08      	cmp	r3, #8
 8003916:	d824      	bhi.n	8003962 <UART_SetConfig+0x342>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <UART_SetConfig+0x300>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003945 	.word	0x08003945
 8003924:	08003963 	.word	0x08003963
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003963 	.word	0x08003963
 8003930:	08003953 	.word	0x08003953
 8003934:	08003963 	.word	0x08003963
 8003938:	08003963 	.word	0x08003963
 800393c:	08003963 	.word	0x08003963
 8003940:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7ff f814 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003948:	61f8      	str	r0, [r7, #28]
        break;
 800394a:	e010      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <UART_SetConfig+0x56c>)
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e00d      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7fe ff75 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003956:	61f8      	str	r0, [r7, #28]
        break;
 8003958:	e009      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e005      	b.n	800396e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800396c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80fb 	beq.w	8003b6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d305      	bcc.n	8003992 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	429a      	cmp	r2, r3
 8003990:	d903      	bls.n	800399a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003998:	e0e8      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2200      	movs	r2, #0
 800399e:	461c      	mov	r4, r3
 80039a0:	4615      	mov	r5, r2
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	022b      	lsls	r3, r5, #8
 80039ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039b0:	0222      	lsls	r2, r4, #8
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6849      	ldr	r1, [r1, #4]
 80039b6:	0849      	lsrs	r1, r1, #1
 80039b8:	2000      	movs	r0, #0
 80039ba:	4688      	mov	r8, r1
 80039bc:	4681      	mov	r9, r0
 80039be:	eb12 0a08 	adds.w	sl, r2, r8
 80039c2:	eb43 0b09 	adc.w	fp, r3, r9
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d4:	4650      	mov	r0, sl
 80039d6:	4659      	mov	r1, fp
 80039d8:	f7fc fc08 	bl	80001ec <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ea:	d308      	bcc.n	80039fe <UART_SetConfig+0x3de>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f2:	d204      	bcs.n	80039fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	e0b6      	b.n	8003b6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a04:	e0b2      	b.n	8003b6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d15e      	bne.n	8003ace <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d828      	bhi.n	8003a6a <UART_SetConfig+0x44a>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x400>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a6b 	.word	0x08003a6b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7fe ff94 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003a48:	61f8      	str	r0, [r7, #28]
        break;
 8003a4a:	e014      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7fe ffa6 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <UART_SetConfig+0x56c>)
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e00d      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe fef1 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e009      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e005      	b.n	8003a76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d077      	beq.n	8003b6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d916      	bls.n	8003ac6 <UART_SetConfig+0x4a6>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9e:	d212      	bcs.n	8003ac6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	8afb      	ldrh	r3, [r7, #22]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	8afa      	ldrh	r2, [r7, #22]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e052      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003acc:	e04e      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d827      	bhi.n	8003b26 <UART_SetConfig+0x506>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x4bc>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b27 	.word	0x08003b27
 8003af8:	08003b27 	.word	0x08003b27
 8003afc:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b00:	f7fe ff36 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003b04:	61f8      	str	r0, [r7, #28]
        break;
 8003b06:	e014      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe ff48 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003b0c:	61f8      	str	r0, [r7, #28]
        break;
 8003b0e:	e010      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <UART_SetConfig+0x56c>)
 8003b12:	61fb      	str	r3, [r7, #28]
        break;
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fe93 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003b1a:	61f8      	str	r0, [r7, #28]
        break;
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b22:	61fb      	str	r3, [r7, #28]
        break;
 8003b24:	e005      	b.n	8003b32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b30:	bf00      	nop
    }

    if (pclk != 0U)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	085a      	lsrs	r2, r3, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	441a      	add	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d909      	bls.n	8003b66 <UART_SetConfig+0x546>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d205      	bcs.n	8003b66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	e002      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40008000 	.word	0x40008000
 8003b8c:	00f42400 	.word	0x00f42400

08003b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8e:	d10a      	bne.n	8003ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce4:	f7fd fbf6 	bl	80014d4 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d10e      	bne.n	8003d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f82d 	bl	8003d66 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e023      	b.n	8003d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d10e      	bne.n	8003d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f817 	bl	8003d66 <UART_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e00d      	b.n	8003d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b09c      	sub	sp, #112	; 0x70
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d76:	e0a5      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	f000 80a1 	beq.w	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fd fba7 	bl	80014d4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d13e      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dac:	667b      	str	r3, [r7, #100]	; 0x64
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e6      	bne.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	663b      	str	r3, [r7, #96]	; 0x60
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e067      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d04f      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d147      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e6      	bne.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e90:	623a      	str	r2, [r7, #32]
 8003e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e010      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f43f af4a 	beq.w	8003d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3770      	adds	r7, #112	; 0x70
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003eee:	b084      	sub	sp, #16
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	f107 001c 	add.w	r0, r7, #28
 8003efc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fa6f 	bl	80043f0 <USB_CoreReset>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
 8003f28:	e005      	b.n	8003f36 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f42:	b004      	add	sp, #16
 8003f44:	4770      	bx	lr

08003f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f96:	2001      	movs	r0, #1
 8003f98:	f7fd faa8 	bl	80014ec <HAL_Delay>
      ms++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa16 	bl	80043d4 <USB_GetMode>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d01e      	beq.n	8003fec <USB_SetCurrentMode+0x84>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b31      	cmp	r3, #49	; 0x31
 8003fb2:	d9f0      	bls.n	8003f96 <USB_SetCurrentMode+0x2e>
 8003fb4:	e01a      	b.n	8003fec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d115      	bne.n	8003fe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f7fd fa8f 	bl	80014ec <HAL_Delay>
      ms++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f9fd 	bl	80043d4 <USB_GetMode>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <USB_SetCurrentMode+0x84>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b31      	cmp	r3, #49	; 0x31
 8003fe4:	d9f0      	bls.n	8003fc8 <USB_SetCurrentMode+0x60>
 8003fe6:	e001      	b.n	8003fec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e005      	b.n	8003ff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b32      	cmp	r3, #50	; 0x32
 8003ff0:	d101      	bne.n	8003ff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004000:	b084      	sub	sp, #16
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800400e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e009      	b.n	8004034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3340      	adds	r3, #64	; 0x40
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3301      	adds	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0e      	cmp	r3, #14
 8004038:	d9f2      	bls.n	8004020 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11c      	bne.n	800407a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e005      	b.n	8004086 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800408c:	461a      	mov	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004098:	4619      	mov	r1, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	461a      	mov	r2, r3
 80040a2:	680b      	ldr	r3, [r1, #0]
 80040a4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040a6:	2103      	movs	r1, #3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f959 	bl	8004360 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040ae:	2110      	movs	r1, #16
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8f1 	bl	8004298 <USB_FlushTxFifo>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f91d 	bl	8004300 <USB_FlushRxFifo>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e043      	b.n	8004182 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800410c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004110:	d118      	bne.n	8004144 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	461a      	mov	r2, r3
 8004126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e013      	b.n	8004156 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e008      	b.n	8004156 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	2300      	movs	r3, #0
 8004166:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	461a      	mov	r2, r3
 8004176:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800417a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3301      	adds	r3, #1
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3b7      	bcc.n	80040fa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e043      	b.n	8004218 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a6:	d118      	bne.n	80041da <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	461a      	mov	r2, r3
 80041bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e013      	b.n	80041ec <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d0:	461a      	mov	r2, r3
 80041d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	e008      	b.n	80041ec <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	461a      	mov	r2, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	2300      	movs	r3, #0
 80041fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3b7      	bcc.n	8004190 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004232:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <USB_DevInit+0x294>)
 8004254:	4313      	orrs	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f043 0208 	orr.w	r2, r3, #8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800426c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428e:	b004      	add	sp, #16
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	803c3800 	.word	0x803c3800

08004298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <USB_FlushTxFifo+0x64>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e01b      	b.n	80042f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	daf2      	bge.n	80042a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	019b      	lsls	r3, r3, #6
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3301      	adds	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <USB_FlushTxFifo+0x64>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e006      	b.n	80042f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d0f0      	beq.n	80042d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	00030d40 	.word	0x00030d40

08004300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <USB_FlushRxFifo+0x5c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e018      	b.n	8004350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	daf2      	bge.n	800430c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2210      	movs	r2, #16
 800432e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3301      	adds	r3, #1
 8004334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <USB_FlushRxFifo+0x5c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e006      	b.n	8004350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d0f0      	beq.n	8004330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	00030d40 	.word	0x00030d40

08004360 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043ac:	f023 0303 	bic.w	r3, r3, #3
 80043b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0301 	and.w	r3, r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <USB_CoreReset+0x64>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e01b      	b.n	8004446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	daf2      	bge.n	80043fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <USB_CoreReset+0x64>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e006      	b.n	8004446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d0f0      	beq.n	8004426 <USB_CoreReset+0x36>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	00030d40 	.word	0x00030d40

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4d0d      	ldr	r5, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2600      	movs	r6, #0
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4d0b      	ldr	r5, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f000 f820 	bl	80044b0 <_init>
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2600      	movs	r6, #0
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	08004518 	.word	0x08004518
 8004494:	08004518 	.word	0x08004518
 8004498:	08004518 	.word	0x08004518
 800449c:	0800451c 	.word	0x0800451c

080044a0 <memset>:
 80044a0:	4402      	add	r2, r0
 80044a2:	4603      	mov	r3, r0
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	f803 1b01 	strb.w	r1, [r3], #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
